geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 50, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.01, label = "-1 SD", colour = LowerC) +
annotate("text", x = 75, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.01, label = "-1 SD", colour = LowerC) +
annotate("text", x = 75, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
fix(DensityLower)
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.018, label = "-1 SD", colour = LowerC) +
annotate("text", x = 45, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.21, label = "-1 SD", colour = LowerC) +
annotate("text", x = 45, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.021, label = "-1 SD", colour = LowerC) +
annotate("text", x = 45, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 23, y = 0.021, label = "-1 SD", colour = LowerC) +
annotate("text", x = 45, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 23, y = 0.021, label = "-1 SD", colour = LowerC) +
annotate("text", x = 43, y = 0.008, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
InfantNoMiss$LogInfantMort <- log(InfantNoMiss$InfantMortality)
hist(InfantNoMiss$LogInfantMort)
<<LogTransformScatter, fig.height=5, tidy=FALSE>>=
# Log Transform InfantMortality
InfantNoMiss$LogInfant <- log(
InfantNoMiss$InfantMortality)
# Create Histogram of log(InfantMortality)
hist(InfantNoMiss$LogInfant, main = "")
InfantNoMiss$LogInfant <- log(
InfantNoMiss$InfantMortality)
# Create Histogram of log(InfantMortality)
hist(InfantNoMiss$LogInfant, main = "")
hist(InfantNoMiss$LogInfant, main = "", xlab = "log{InfantMortality")
InfantNoMiss$logGDP <- log(InfantNoMiss$GDPperCapita)
InfantNoMiss$logGDP <- log(InfantNoMiss$GDPperCapita)
# Plot
qplot(x = logInf, y = logGDP, data = InfantNoMiss, geom = "point") +
xlab("log(Infant Mortality") + ylab("log(GDP)") +
theme_bw
# Plot
qplot(x = logInf, y = logGDP, data = InfantNoMiss, geom = "point") +
xlab("log(Infant Mortality") + ylab("log(GDP)") +
theme_bw()
InfantNoMiss$logInf <- log(
InfantNoMiss$InfantMortality)
qplot(x = logInf, y = logGDP, data = InfantNoMiss, geom = "point") +
xlab("log(Infant Mortality") + ylab("log(GDP)") +
theme_bw()
qplot(x = logInf, y = logGDP, data = InfantNoMiss, geom = "point") +
xlab("\nlog(Infant Mortality)") + ylab("log(GDP)\n") +
theme_bw(base_size=15)
qplot(x = logInf, y = logGDP, data = InfantNoMiss, geom = "point") +
stat_smooth() +
xlab("\nlog(Infant Mortality)") + ylab("log(GDP)\n") +
theme_bw(base_size=15)
?table
?data
library(package=datasets, help)
?datasets
library(help="datasets")
test <- Titanic
fix(test)
test <- data.frame(Titanic)
View(test)
TitanicDF <- data.frame(Titanic)
plot(Titanic$Sex)
Titanic$Sex <- factor(Titanic$Sex)
TitanicDF <- data.frame(Titanic, stringsAsFactors = FALSE)
Titanic$Sex <- factor(Titanic$Sex)
Titanic$Sex <- factor(Titanic[[Sex]])
Titanic$Sex <- factor(Titanic[[,Sex]])
Titanic$Sex <- factor(Titanic[['Sex']])
Titanic$Sex <- factor(Titanic['Sex'])
plot(Titanic$Sex)
plot(cars$type)
test <- cars$type
fix(test)
new <- cars$type
fix(new)
new <- cars$type
fix(new)
plot(cars$type)
new <- cars
View(new)
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
View(MortalityGDP)
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
View(MortalityGDP)
unique(MortalityGDP$region)
MortalityGDP$region <- MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)"] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)"] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)",] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)",] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
MortalityGDP$region <- character(MortalityGDP$region)
MortalityGDP$region <- as.character(MortalityGDP$region)
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
MortalityGDP$region[MortalityGDP$region == "Middle East \& North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
class(MortalityGDP$region)
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East/North Africa"
plot(MortalityGDP$region)
View(MortalityGDP)
MortalityGDP$region <- as.character(MortalityGDP$region)
MortalityGDP$region
summary(MortalityGDP$region)
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)"] <- "ME"
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)",] <- "ME"
MortalityGDP$region <- factor(MortalityGDP$region, labels = c(1, 2, 3, 4, 5, 6, 7, 8))
View(MortalityGDP)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
class(MortalityGDP$region)
summar(MortalityGDP$region)
summary(MortalityGDP$region)
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "NA", "SA", "ME", "EAP", "LA", "EUR"))
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "NA", "SA", "ME", "EAP", "LA", "SSA", "EUR"))
View(MortalityGDP)
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
summary(MortalityGDP$region)
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
View(MortalityGDP)
# Load package
library(devtools)
# Gather data using source code at: http://bit.ly/OTWEGS
# Data is stored in a data frame: MortalityGDP
source_url("http://bit.ly/OTWEGS")
# See contents of MortalityGDP
names(MortalityGDP)
table(MortalityGDP$region, MortalityGDP$income)
View(MortalityGDP)
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("EUR", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
MortalityGDP$DumIncome <- MortalityGDP$GDPperCapita[
>= 25000] <- "high"
MortalityGDP$DumIncome <- MortalityGDP$GDPperCapita[
< 25000] <- "low"
MortalityGDP$DumIncome <- MortalityGDP[
MortalityGDP$GDPperCapita
>= 25000] <- "high"
MortalityGDP$DumIncome <- MortalityGDP[
MortalityGDP$GDPperCapita
< 25000] <- "low"
InfantNoMiss <- subset(MortalityGDP,
!is.na(InfantMortality))
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
< 15] <- "low"
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
>= 15,] <- "high"
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
< 15,] <- "low"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
< 15] <- "low"
View(InfantNoMiss)
InfantNoMiss <- subset(MortalityGDP,
!is.na(InfantMortality))
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
< 15] <- "low"
View(InfantNoMiss)
table(InfantNoMiss$region, InfantNoMissGDP$DumMort)
table(InfantNoMiss$region, InfantNoMiss$DumMort)
mosaicplot(table(InfantNoMiss$region, InfantNoMiss$DumMort))
MortalityGDP <- subset(MortalityGDP, region != "None")
View(MortalityGDP)
plot(MortalityGDP$region)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
# Recode region
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
# Remove EU
MortalityGDP <- subset(MortalityGDP, region != "None")
View(MortalityGDP)
# Load package
library(devtools)
# Gather data using source code at: http://bit.ly/OTWEGS
# Data is stored in a data frame: MortalityGDP
source_url("http://bit.ly/OTWEGS")
# See contents of MortalityGDP
names(MortalityGDP)
plot(MortalityGDP$region)
MortalityGDP <- factor(MortalityGDP$region)
##################
# Gather World Bank Data on Mortality Rate & GDP per capita for 2009
# Christopher Gandrud
# Updated 24 September 2012
##################
#### Data to gather ####
# Mortality rate, infant (per 1,000 live births): SP.DYN.IMRT.IN
# GDP per capita (current US$): NY.GDP.PCAP.CD
# Load package
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
# Recode region
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
# Remove EU
MortalityGDP <- subset(MortalityGDP, region != "None")
MortalityGDP$region <- factor(MortalityGDP$region)
View(MortalityGDP)
read.table("clipboard")
read.table("clipboard")
read.table("clipboard")
read.table("clipboard")
read.table("clipboard")
install.packages("timeDate")
setwd("/git_repositories/amcData/BaseFiles/AMCFull/")
AMCFull <- read.csv("AMCFull.csv")
View(AMCFull)
AMCFull <- names(AMCFull) %in% c("Source")
fix(AMCFull)
AMCFull <- read.csv("AMCFull.csv")
View(AMCFull)
names(AMCFull)
AMCFull <- AMCFull[, 1:18]
View(AMCFull)
plot(AMCFull$A6)
class(AMCFull4A6)
class(AMCFull$A6)
summary{AMCFull$A6}
summary(AMCFull$A6)
summary(AMCFull$F6)
summary(AMCFull$F7)
AMCFull$A6 <- AMCFull$A7 <- AMCFull$F6 <- AMCFull$F7 <- NULL
View(AMCFull)
View(AMCFull)
?xtable
library(xtable)
?xtable
unique(AMCFull$F1)
library(WDI)
library(reshape)
Countries <- WDI(indicator = "NY.GDP.PCAP.CD")
View(Countries)
Countries <- WDI(indicator = "NY.GDP.PCAP.CD", from = 1960)
Countries <- WDI(indicator = "NY.GDP.PCAP.CD", from = "1960")
?WDI
= "1960")
Countries <- WDI(indicator = "NY.GDP.PCAP.CD", start = "1960")
View(Countries)
library(countrycode)
Countries$IMFCode <- countrycode(Countries$country, origin = "country.name", destination = "imf")
Countries <- Countries[!is.na(Countries$IMFCode), ]
View(Countries)
Countries <- Countries[Countries$IMFCode != 696, ]
View(Countries)
Countries$Exists <- TRUE
View(Countries)
Countries <- Countries[!is.na(Countries$NY.GDP.PCAP.CD), ]
View(Countries)
View(Countries)
# Load required packages
library(WDI)
library(countrycode)
# Download data GDP per capita (current US$) data
# Indicator ID: NY.GDP.PCAP.CD
Countries <- WDI(indicator = "NY.GDP.PCAP.CD", start = "1960")
# Keep only countries with IMFCodes
Countries$IMFCode <- countrycode(Countries$country, origin = "country.name", destination = "imf")
Countries <- Countries[!is.na(Countries$IMFCode), ]
# Remove EU
Countries <- Countries[Countries$IMFCode != 696, ]
# Remove country-years with no GDP per capita data
Countries <- Countries[!is.na(Countries$NY.GDP.PCAP.CD), ]
# Create logical existance variable
Countries$Data <- TRUE
Countries[, c("country", "year", "IMFCode", "Data")]
Countries <- Countries[, c("country", "year", "IMFCode", "Data")]
View(Countries)
Countries <- WDI(indicator = "NY.GDP.PCAP.CD", start = "1960")
# Keep only countries with IMFCodes
Countries$IMFCode <- countrycode(Countries$country, origin = "country.name", destination = "imf")
Countries <- Countries[!is.na(Countries$IMFCode), ]
# Remove EU
Countries <- Countries[Countries$IMFCode != 696, ]
# Remove country-years with no GDP per capita data
Countries <- Countries[!is.na(Countries$NY.GDP.PCAP.CD), ]
# Create logical existance variable
Countries$Data <- TRUE
View(Countries)
Countries <- Countries[, c("country", "year", "IMFCode", "Data")]
View(Countries)
Countries <- Countries[1:25, c("country", "year", "IMFCode", "Data")]
View(Countries)
View(AMCFull)
library(devtools)
source_url("https://raw.github.com/christophergandrud/JurisdictionYear/master/CountriesJurisdictions.R")
# Set working directory and load the data.
setwd("/git_repositories/amcData/BaseFiles/AMCFull/")
# Load Data
AMCFull <- read.csv("AMCFull.csv")
# Drop source variable and notes
AMCFull <- AMCFull[, 1:18]
# Drop A6, A7, F6, F7
AMCFull$A6 <- AMCFull$A7 <- AMCFull$F6 <- AMCFull$F7 <- NULL
# Keep valid jurisdiction-years (see: https://github.com/christophergandrud/JurisdictionYear)
# Run CountriesJurisdictions.R
source_url("https://raw.github.com/christophergandrud/JurisdictionYear/master/CountriesJurisdictions.R")
AMCFull <- merge(AMCFull, Countries, by = union(IMFCode, year))
View(AMCFull)
library(reshape)
AMCFull <- rename(AMCFull, c(imfcode = "IMFCode"))
AMCFull <- merge(AMCFull, Countries, by = union(IMFCode, year))
View(AMCFull)
AMCFull <- merge(x = AMCFull, y =  Countries, by = union(IMFCode, year))
View(Countries)
names(AMCFull)
AMCFull <- merge(x = AMCFull, y = Countries, by = union("IMFCode", "year"))
View(AMCFull)
summary(AMCFull$Data)
View(AMCFull)
# Load Data
AMCFull <- read.csv("AMCFull.csv")
# Drop source variable and notes
AMCFull <- AMCFull[, 1:18]
# Drop A6, A7, F6, F7
AMCFull$A6 <- AMCFull$A7 <- AMCFull$F6 <- AMCFull$F7 <- NULL
# Rename imfcode IMFCode
AMCFull <- rename(AMCFull, c(imfcode = "IMFCode"))
AMCFull <- merge(x = AMCFull, y = Countries, by = union("IMFCode", "year"), all = TRUE)
View(AMCFull)
US <- subset(Countries. country == "UNITED STATES")
?subset
US <- subset(Countries, country == "UNITED STATES")
US <- subset(Countries, IMFCode == 111)
View(US)
?WDI
# Load Data
AMCFull <- read.csv("AMCFull.csv")
# Drop source variable and notes
AMCFull <- AMCFull[, 1:18]
# Drop A6, A7, F6, F7
AMCFull$A6 <- AMCFull$A7 <- AMCFull$F6 <- AMCFull$F7 <- NULL
# Rename imfcode IMFCode
AMCFull <- rename(AMCFull, c(imfcode = "IMFCode"))
# Keep valid jurisdiction-years (see: https://github.com/christophergandrud/JurisdictionYear)
# Run CountriesJurisdictions.R
source_url("https://raw.github.com/christophergandrud/JurisdictionYear/master/CountriesJurisdictions.R")
# Merge AMCFull and Countries
AMCFull <- merge(x = AMCFull, y = Countries, by = union("IMFCode", "year"), all = TRUE)
View(AMCFull)
View(AMCFull)
AMC <- AMCFull[!is.na(AMCFull$Data) & year != 2012, ]
AMC <- AMCFull[!is.na(AMCFull$Data) & AMCFull$year != 2012, ]
View(AMC)
AMC <- AMCFull[AMCFull$year != 2012 & !is.na(AMCFull$Data), ]
View(AMC)
AMC <- subset(AMCFull, year != 2012 & !is.na(AMCFull$Data))
View(AMC)
View(AMCFull)
AMC <- subset(AMCFull, year == 2012 | !is.na(AMCFull$Data))
View(AMC)
View(AMC)
names(AMC)
AMC <- rename(AMC, c(country.x = "country"))
View(AMC)
unique(AMC$A2)
#### Load Data ####
AMCFull <- read.csv("AMCFull.csv")
# Drop source variable and notes
AMCFull <- AMCFull[, 1:18]
# Drop A6, A7, F6, F7
AMCFull$A6 <- AMCFull$A7 <- AMCFull$F6 <- AMCFull$F7 <- NULL
# Rename imfcode IMFCode
AMCFull <- rename(AMCFull, c(imfcode = "IMFCode"))
#### Keep valid jurisdiction-years (see: https://github.com/christophergandrud/JurisdictionYear) ####
# Run CountriesJurisdictions.R
source_url("https://raw.github.com/christophergandrud/JurisdictionYear/master/CountriesJurisdictions.R")
# Merge AMCFull and Countries
AMCFull <- merge(x = AMCFull, y = Countries, by = union("IMFCode", "year"), all = TRUE)
# Keep valid plus 2012
AMC <- subset(AMCFull, year == 2012 | !is.na(AMCFull$Data))
AMC <- AMC[!is.na(AMC$country.x), ]
View(AMC)
