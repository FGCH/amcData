View(test)
TitanicDF <- data.frame(Titanic)
plot(Titanic$Sex)
Titanic$Sex <- factor(Titanic$Sex)
TitanicDF <- data.frame(Titanic, stringsAsFactors = FALSE)
Titanic$Sex <- factor(Titanic$Sex)
Titanic$Sex <- factor(Titanic[[Sex]])
Titanic$Sex <- factor(Titanic[[,Sex]])
Titanic$Sex <- factor(Titanic[['Sex']])
Titanic$Sex <- factor(Titanic['Sex'])
plot(Titanic$Sex)
plot(cars$type)
test <- cars$type
fix(test)
new <- cars$type
fix(new)
new <- cars$type
fix(new)
plot(cars$type)
new <- cars
View(new)
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
View(MortalityGDP)
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
View(MortalityGDP)
unique(MortalityGDP$region)
MortalityGDP$region <- MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)"] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)"] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)",] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)",] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
MortalityGDP$region <- character(MortalityGDP$region)
MortalityGDP$region <- as.character(MortalityGDP$region)
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
MortalityGDP$region[MortalityGDP$region == "Middle East \& North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
class(MortalityGDP$region)
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East/North Africa"
plot(MortalityGDP$region)
View(MortalityGDP)
MortalityGDP$region <- as.character(MortalityGDP$region)
MortalityGDP$region
summary(MortalityGDP$region)
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)"] <- "ME"
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)",] <- "ME"
MortalityGDP$region <- factor(MortalityGDP$region, labels = c(1, 2, 3, 4, 5, 6, 7, 8))
View(MortalityGDP)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
class(MortalityGDP$region)
summar(MortalityGDP$region)
summary(MortalityGDP$region)
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "NA", "SA", "ME", "EAP", "LA", "EUR"))
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "NA", "SA", "ME", "EAP", "LA", "SSA", "EUR"))
View(MortalityGDP)
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
summary(MortalityGDP$region)
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
View(MortalityGDP)
# Load package
library(devtools)
# Gather data using source code at: http://bit.ly/OTWEGS
# Data is stored in a data frame: MortalityGDP
source_url("http://bit.ly/OTWEGS")
# See contents of MortalityGDP
names(MortalityGDP)
table(MortalityGDP$region, MortalityGDP$income)
View(MortalityGDP)
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("EUR", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
MortalityGDP$DumIncome <- MortalityGDP$GDPperCapita[
>= 25000] <- "high"
MortalityGDP$DumIncome <- MortalityGDP$GDPperCapita[
< 25000] <- "low"
MortalityGDP$DumIncome <- MortalityGDP[
MortalityGDP$GDPperCapita
>= 25000] <- "high"
MortalityGDP$DumIncome <- MortalityGDP[
MortalityGDP$GDPperCapita
< 25000] <- "low"
InfantNoMiss <- subset(MortalityGDP,
!is.na(InfantMortality))
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
< 15] <- "low"
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
>= 15,] <- "high"
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
< 15,] <- "low"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
< 15] <- "low"
View(InfantNoMiss)
InfantNoMiss <- subset(MortalityGDP,
!is.na(InfantMortality))
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
< 15] <- "low"
View(InfantNoMiss)
table(InfantNoMiss$region, InfantNoMissGDP$DumMort)
table(InfantNoMiss$region, InfantNoMiss$DumMort)
mosaicplot(table(InfantNoMiss$region, InfantNoMiss$DumMort))
MortalityGDP <- subset(MortalityGDP, region != "None")
View(MortalityGDP)
plot(MortalityGDP$region)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
# Recode region
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
# Remove EU
MortalityGDP <- subset(MortalityGDP, region != "None")
View(MortalityGDP)
# Load package
library(devtools)
# Gather data using source code at: http://bit.ly/OTWEGS
# Data is stored in a data frame: MortalityGDP
source_url("http://bit.ly/OTWEGS")
# See contents of MortalityGDP
names(MortalityGDP)
plot(MortalityGDP$region)
MortalityGDP <- factor(MortalityGDP$region)
##################
# Gather World Bank Data on Mortality Rate & GDP per capita for 2009
# Christopher Gandrud
# Updated 24 September 2012
##################
#### Data to gather ####
# Mortality rate, infant (per 1,000 live births): SP.DYN.IMRT.IN
# GDP per capita (current US$): NY.GDP.PCAP.CD
# Load package
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
# Recode region
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
# Remove EU
MortalityGDP <- subset(MortalityGDP, region != "None")
MortalityGDP$region <- factor(MortalityGDP$region)
View(MortalityGDP)
read.table("clipboard")
read.table("clipboard")
read.table("clipboard")
read.table("clipboard")
read.table("clipboard")
install.packages(c("seriation", "spdep"))
# Load packages
library(reshape)
library(devtools)
# Set working directory and load the data.
setwd("/git_repositories/amcData/BaseFiles/AMCFull/")
#### Load Data ####
AMCFull <- read.csv("AMCFull.csv")
View(AMCFull)
library(reshape)
library(devtools)
# Set working directory and load the data.
setwd("/git_repositories/amcData/BaseFiles/AMCFull/")
#### Load Data ####
AMCFull <- read.csv("AMCFull.csv")
View(AMCFull)
unique(AMCFull$AMCType)
unique(AMCFull$F1)
unique(AMCFull$NumAMCOp)
View(AMCFull)
AMCFull <- AMCFull[, 1:31]
AMCFull <- AMCFull[, 1:21]
View(AMCFull)
AMCFull$A6 <- AMCFull$A7 <- AMCFull$F6 <- AMCFull$F7 <- NULL
AMCFull <- rename(AMCFull, c(imfcode = "IMFCode"))
name
names(AMCFull)
unique(AMCFull$F5)
unique(AMCFull$F4)
unique(AMCFull$F3)
unique(AMCFull$F2)
setwd("/git_repositories/amcData/BaseFiles/AMCFull/")
#### Load Data ####
AMCFull <- read.csv("AMCFull.csv")
# Drop source variable and notes
AMCFull <- AMCFull[, 1:21]
# Drop A6, A7, F6, F7 (no countries were observed to have more than 5 AMCs)
AMCFull$A6 <- AMCFull$A7 <- AMCFull$F6 <- AMCFull$F7 <- NULL
# Rename imfcode IMFCode
AMCFull <- rename(AMCFull, c(imfcode = "IMFCode"))
#### Keep valid jurisdiction-years (see: https://github.com/christophergandrud/JurisdictionYear) ####
# Run CountriesJurisdictions.R
source_url("https://raw.github.com/christophergandrud/JurisdictionYear/master/CountriesJurisdictions.R")
# Merge AMCFull and Countries
AMCFull <- merge(x = AMCFull, y = Countries, by = union("IMFCode", "year"), all = TRUE)
# Keep valid plus 2012
AMC <- subset(AMCFull, year == 2012 | !is.na(AMCFull$Data))
AMC <- AMC[!is.na(AMC$country.x), ]
# Rename country.x country
AMC <- rename(AMC, c(country.x = "country"))
rm(Countries)
View(AMCFull)
AMC <- rename(AMC, c(country.x = "country"))
View(AMCFull)
names(AMC)
View(AMC)
View(AMCFull)
View(AMC)
AMC$NumAMCOpNoNA[is.na(AMC$NumAMCOp] <- 0
AMC$NumAMCOpNoNA[is.na(AMC$NumAMCOp)] <- 0
View(AMC)
AMC$NumAMCOpNoNA[AMC$NumAMCOp] <- 0
View(AMC)
AMC$NumAMCOpNoNA <- AMC$NumAMCOp
View(AMC)
AMC$NumAMCOpNoNA[is.na(AMC$NumAMCOpNoNA)] <- 0
View(AMC)
AMC$NumAMCCountryNoNA <- AMC$NumAMCOp
AMC$NumAMCCountryNoNA[is.na(AMC$NumAMCCountryNoNA)] <- 0
View(AMC)
AMC$NumAMCCountryNoNA <- AMC$NumAMCCountr
AMC$NumAMCCountryNoNA[is.na(AMC$NumAMCCountryNoNA)] <- 0
AMC$NumAMCCountryNoNA <- AMC$NumAMCCountry
AMC$NumAMCCountryNoNA[is.na(AMC$NumAMCCountryNoNA)] <- 0
AMC$NumAMCCountryLagNoNA <- AMC$NumAMCCountryLag
AMC$NumAMCCountryLagNoNA[is.na(AMC$NumAMCCountryLagNoNA)] <- 0
View(AMC)
AMC <- AMC[, c("IMFCode", "country", "year",
"AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")]
View(AMC)
View(AMC)
ColNames <- names(AMC[, c("AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")])
Description <- c("Whether the AMC is centralized or decentralised",
"How many AMCs are operating in a given year (assume missing = 0)"
"How many AMCs have been opened since 1980 up to and including a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to, but not including a given year (assume missing = 0)",
"Governance type of 1st AMC.",
"Governance type of 2nd AMC.",
"Governance type of 3rd AMC.",
"Governance type of 4th AMC.",
"Governance type of 5th AMC.")
Date <- date()
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak. See <a href="NEED TO FILL IN"></a> for more details Current as of", Date, sep = " ")
VarList <- cbind(ColNames, Description, Source)
VarList <- xtable(VarList)
AMCTableTable <- print(VarList, type = "html")
cat("# Full AMC Data Set Description\n\n\n", AMCTable, file = "/git_repositories/amcData/MainData/VariableDescriptions/AMCFull.md")
library(xtable)
#### Create variable descriptions ####
ColNames <- names(AMC[, c("AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")])
Description <- c("Whether the AMC is centralized or decentralised",
"How many AMCs are operating in a given year (assume missing = 0)"
"How many AMCs have been opened since 1980 up to and including a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to, but not including a given year (assume missing = 0)",
"Governance type of 1st AMC.",
"Governance type of 2nd AMC.",
"Governance type of 3rd AMC.",
"Governance type of 4th AMC.",
"Governance type of 5th AMC.")
Date <- date()
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak. See <a href="NEED TO FILL IN"></a> for more details Current as of", Date, sep = " ")
VarList <- cbind(ColNames, Description, Source)
VarList <- xtable(VarList)
AMCTableTable <- print(VarList, type = "html")
cat("# Full AMC Data Set Description\n\n\n", AMCTable, file = "/git_repositories/amcData/MainData/VariableDescriptions/AMCFull.md")
ColNames <- names(AMC[, c("AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")])
Description <- c("Whether the AMC is centralized or decentralised",
"How many AMCs are operating in a given year (assume missing = 0)"
"How many AMCs have been opened since 1980 up to and including a given year (assume missing = 0)",
Description <- c("Whether the AMC is centralized or decentralised",
"How many AMCs are operating in a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to and including a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to, but not including a given year (assume missing = 0)",
"Governance type of 1st AMC.",
"Governance type of 2nd AMC.",
"Governance type of 3rd AMC.",
"Governance type of 4th AMC.",
"Governance type of 5th AMC.")
Date <- date()
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak. See <a href="NEED TO FILL IN"></a> for more details Current as of", Date, sep = " ")
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak. See <a href=\"NEED TO FILL IN\"></a> for more details Current as of", Date, sep = " ")
VarList <- cbind(ColNames, Description, Source)
fix(Source)
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak. See <a href=\\"NEED TO FILL IN\\"></a> for more details Current as of", Date, sep = " ")
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak. See <a href=\\\"NEED TO FILL IN\\\"></a> for more details Current as of", Date, sep = " ")
VarList <- cbind(ColNames, Description, Source)
fix(Source)
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak. See <a href=\\\\"NEED TO FILL IN\\\\"></a> for more details Current as of", Date, sep = " ")
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak. See also the README file for the AMCFull.csv base data file.></a> for more details. Current as of", Date, sep = " ")
VarList <- cbind(ColNames, Description, Source)
VarList <- xtable(VarList)
AMCTableTable <- print(VarList, type = "html")
cat("# Full AMC Data Set Description\n\n\n", AMCTable, file = "/git_repositories/amcData/MainData/VariableDescriptions/AMCFull.md")
AMCTable <- print(VarList, type = "html")
cat("# Full AMC Data Set Description\n\n\n", AMCTable, file = "/git_repositories/amcData/MainData/VariableDescriptions/AMCFull.md")
#### Final clean then save ####
# Drop now extraneous variables
AMC <- AMC[, c("IMFCode", "country", "year",
"AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")]
#### Create variable descriptions ####
ColNames <- names(AMC[, c("AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")])
Description <- c("Whether the AMC is centralized or decentralised",
"How many AMCs are operating in a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to and including a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to, but not including a given year (assume missing = 0)",
"Governance type of 1st AMC.",
"Governance type of 2nd AMC.",
"Governance type of 3rd AMC.",
"Governance type of 4th AMC.",
"Governance type of 5th AMC.")
Date <- date()
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak. See also the README file for the AMCFull.csv base data file.></a> for more details. Current as of", Date, sep = " ")
VarList <- cbind(ColNames, Description, Source)
VarList <- xtable(VarList)
AMCTable <- print(VarList, type = "html")
#### Final clean then save ####
# Drop now extraneous variables
AMC <- AMC[, c("IMFCode", "country", "year",
"AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")]
#### Create variable descriptions ####
ColNames <- names(AMC[, c("AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")])
Description <- c("Whether the AMC is centralized or decentralised",
"How many AMCs are operating in a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to and including a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to, but not including a given year (assume missing = 0)",
"Governance type of 1st AMC.",
"Governance type of 2nd AMC.",
"Governance type of 3rd AMC.",
"Governance type of 4th AMC.",
"Governance type of 5th AMC.")
Date <- date()
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak.></a> for more details. Current as of", Date, sep = " ")
VarList <- cbind(ColNames, Description, Source)
VarList <- xtable(VarList)
AMCTable <- print(VarList, type = "html")
cat("# Full AMC Data Set Description\n\n\n", AMCTable, file = "/git_repositories/amcData/MainData/VariableDescriptions/AMCFull.md")
?date
?Date
#### Create variable descriptions ####
ColNames <- names(AMC[, c("AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")])
Description <- c("Whether the AMC is centralized or decentralised",
"How many AMCs are operating in a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to and including a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to, but not including a given year (assume missing = 0)",
"Governance type of 1st AMC.",
"Governance type of 2nd AMC.",
"Governance type of 3rd AMC.",
"Governance type of 4th AMC.",
"Governance type of 5th AMC.")
Date <- Date()
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak.></a> for more details. Current as of", Date, sep = " ")
VarList <- cbind(ColNames, Description, Source)
VarList <- xtable(VarList)
AMCTable <- print(VarList, type = "html")
cat("# Full AMC Data Set Description\n\n\n", AMCTable, file = "/git_repositories/amcData/MainData/VariableDescriptions/AMCFull.md")
#### Final clean then save ####
# Drop now extraneous variables
AMC <- AMC[, c("IMFCode", "country", "year",
"AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")]
#### Create variable descriptions ####
ColNames <- names(AMC[, c("AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")])
Description <- c("Whether the AMC is centralized or decentralised",
"How many AMCs are operating in a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to and including a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to, but not including a given year (assume missing = 0)",
"Governance type of 1st AMC.",
"Governance type of 2nd AMC.",
"Governance type of 3rd AMC.",
"Governance type of 4th AMC.",
"Governance type of 5th AMC.")
Date <- Date()
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak. Current as of", Date, sep = " ")
VarList <- cbind(ColNames, Description, Source)
VarList <- xtable(VarList)
AMCTable <- print(VarList, type = "html")
cat("# Full AMC Data Set Description\n\n\n", AMCTable, file = "/git_repositories/amcData/MainData/VariableDescriptions/AMCFull.md")
#### Create variable descriptions ####
ColNames <- names(AMC[, c("AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")])
Description <- c("Whether the AMC is centralized or decentralised",
"How many AMCs are operating in a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to and including a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to, but not including a given year (assume missing = 0)",
"Governance type of 1st AMC.",
"Governance type of 2nd AMC.",
"Governance type of 3rd AMC.",
"Governance type of 4th AMC.",
"Governance type of 5th AMC.")
Date <- Date()
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak. Current as of")
VarList <- cbind(ColNames, Description, Source)
VarList <- xtable(VarList)
AMCTable <- print(VarList, type = "html")
cat("# Full AMC Data Set Description\n\n\n", Date, AMCTable, file = "/git_repositories/amcData/MainData/VariableDescriptions/AMCFull.md")
#### Create variable descriptions ####
ColNames <- names(AMC[, c("AMCType", "NumAMCOpNoNA", "NumAMCCountryNoNA", "NumAMCCountryLagNoNA",
"F1", "F2",  "F3", "F4", "F5")])
Description <- c("Whether the AMC is centralized or decentralised",
"How many AMCs are operating in a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to and including a given year (assume missing = 0)",
"How many AMCs have been opened since 1980 up to, but not including a given year (assume missing = 0)",
"Governance type of 1st AMC.",
"Governance type of 2nd AMC.",
"Governance type of 3rd AMC.",
"Governance type of 4th AMC.",
"Governance type of 5th AMC.")
Date <- Date()
Source <- paste("Gathered by authors, with research assistance provided by Grzegorz Wolszczak.")
VarList <- cbind(ColNames, Description, Source)
VarList <- xtable(VarList)
AMCTable <- print(VarList, type = "html")
cat("# Full AMC Data Set Description\n\n\n", Date, AMCTable, file = "/git_repositories/amcData/MainData/VariableDescriptions/AMCFull.md")
write.table(amcStart, file = "/git_repositories/amcData/MainData/CleanedPartial/AMCFull.csv", sep = ",", row.names = FALSE)
write.table(AMC, file = "/git_repositories/amcData/MainData/CleanedPartial/AMCFull.csv", sep = ",", row.names = FALSE)
