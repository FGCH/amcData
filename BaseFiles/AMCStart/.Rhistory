# Extract expected values from simulations (Dem)
PL10SimDem.ev <- PL10SimDem$qi
PL10SimDem.ev <-data.frame(PL10SimDem.ev$ev)
names(PL10SimDem.ev) <- c("Republican President", "Democratic President")
PL10SimDem.ev <- melt(PL10SimDem.ev, measure = 1:2)
# Extract expected values from simulations (Rep)
PL10SimRep.ev <- PL10SimRep$qi
PL10SimRep.ev <-data.frame(PL10SimRep.ev$ev)
names(PL10SimRep.ev) <- c("Republican President", "Democratic President")
PL10SimRep.ev <- melt(PL10SimRep.ev, measure = 1:2)
# Final clean up
PL10SimDem.ev$variable <- factor(PL10SimDem.ev$variable)
PL10SimDem.ev$Congress <- "Dem. Congress"
PL10SimRep.ev$variable <- factor(PL10SimRep.ev$variable)
PL10SimRep.ev$Congress <- "Rep. Congress"
# Append both sets of simulation results
PL10Bound <- rbind(PL10SimRep.ev, PL10SimDem.ev)
#### Create plots ####
# Partisan colours
partisan.congress.colours = c("Rep. Congress" = "#C42B00", "Dem. Congress" = "#2259B3")
PartyInteractionPlot <- ggplot(data = PL10Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Congress), colour = "grey70") +
geom_point(shape = 21, aes(color = Congress), alpha = I(0.05), size = 7) +
scale_x_discrete(limits = c("Republican President", "Democratic President")) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.congress.colours, name = "") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
print(PartyInteractionPlot)
View(PL10Bound)
mean(PL10Bound$value[PL10Bound$variable == "Democratic President" & PL10Bound$Congress == "Rep. Congress"] * 100) - mean(PL10Bound$value[PL10Bound$variable == "Democratic President" & PL10Bound$Congress == "Dem. Congress"] * 100)
Monthy <- read.csv("/Users/christophergandrud/Dropbox/Jeff/swf/Christopher/CommodityPriceIndexClean.csv")
Monthly <- read.csv("/Users/christophergandrud/Dropbox/Jeff/swf/Christopher/CommodityPriceIndexClean.csv")
View(Monthly)
Prices <- read.csv("/Users/christophergandrud/Dropbox/Jeff/swf/Christopher/CommodityPriceIndexClean.csv")
library{stringr}
library(stringr)
names(Prices)
Prices$year <- as.numeric(str_extract(Prices$month, "[0-9][0-9][0-9][0-9]"))
View(Prices)
vars <- c("PMETA_Index", "PNRG_Index", "POILAPSP_Index", "POILAPSP_USD", "POILBRE_USD", "POILDUB_USD", "POILWTI_USD")
?mean
?aggregate
AveragePrices <- aggregate(PMETA_Index ~ year, data = Prices, mean)
View(AveragePrices)
View(Prices)
?asign
?apply
assign(paste("AveragePrices", U, sep = ""), aggregate(U ~ year, data = Prices, mean))
for (U in vars){
assign(paste("AveragePrices", U, sep = ""), aggregate(U ~ year, data = Prices, mean))
}
vars <- c("POILBRE_USD", "POILDUB_USD", "POILWTI_USD")
for (U in vars){
assign(paste("AveragePrices", U, sep = ""), aggregate(U ~ year, data = Prices, mean))
}
assign(paste("AveragePrices", U, sep = ""), aggregate([U] ~ year, data = Prices, mean))
assign(paste("AveragePrices", U, sep = ""), aggregate(paste(U) ~ year, data = Prices, mean))
?paste
for (U in vars){
aggregate(paste(U) ~ year, data = Prices, mean)
}
View(Prices)
Prices <- Prices[, -1]
View(Prices)
for (u in vars){
assign(paste("AveragePrices", U, sep = ""), aggregate(paste(u) ~ year, data = Prices, mean))
}
?get
capply
?capply
?apply
?lapply
for (u in 1:7){
assign(paste("AveragePrices", u, sep = ""), aggregate(paste(u) ~ year, data = Prices, mean))
}
for (u in 3:4){
for (u in 3:4){
assign(paste("AveragePrices", u, sep = ""), aggregate(Prices[[u]] ~ year, data = Prices, mean))
}
}
View(AveragePrices3)
View(AveragePrices4)
View(AveragePrices3)
for (u in vars){
assign(paste("AveragePrices", u, sep = ""), aggregate(Prices[[u]] ~ year, data = Prices, mean))
}
View(AveragePricesPOILWTI_USD)
############
# Create Annual Commodity Price Averages with IMF Commodity Price Index Data
# Christopher Gandrud
# 22 July 2012
############
# Load required packages
library(stringr)
# Load data
Prices <- read.csv("/Users/christophergandrud/Dropbox/Jeff/swf/Christopher/CommodityPriceIndexClean.csv")
# Create year variable
Prices$year <- as.numeric(str_extract(Prices$month, "[0-9][0-9][0-9][0-9]"))
# Find year averages
Prices <- Prices[, -1]
vars <- c("PMETA_Index", "PNRG_Index", "POILAPSP_Index", "POILAPSP_USD", "POILBRE_USD", "POILDUB_USD", "POILWTI_USD")
for (u in vars){
assign(paste("AveragePrices", u, sep = ""), aggregate(Prices[[u]] ~ year, data = Prices, mean))
}
View(AveragePricesPOILWTI_USD)
View(AveragePricesPOILDUB_USD)
View(AveragePricesPOILBRE_USD)
?aggregate
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean))
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename(temp, c(Prices[[u]], paste("Average", u, sep = "")))
}
library(reshape)
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename(temp, c(Prices[[u]], paste("Average", u, sep = "")))
}
View(temp)
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename(temp, c("Prices[[u]]", paste("Average", u, sep = "")))
}
View(temp)
temp <- rename(temp, c(Prices[[u]], paste("Average", u, sep = "")))
View(temp)
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename(temp, c(Prices[[u]] = paste("Average", u, sep = "")))
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename(temp, c(Prices[[u]] = paste(""", "Average", u, """, sep = "")))
}
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename(temp, c(Prices\[\[u\]\] = paste(""", "Average", u, """, sep = "")))
}
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename(temp, c(Prices\\[\\[u\\]\\] = paste(""", "Average", u, """, sep = "")))
library(gmisc)
library(gdata)
?rename.vars
View(temp)
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename.vars(temp, from = "Prices[[u]]", to = paste(""", "Average", u, """, sep = ""))
}
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename.vars(temp, from = "Prices[[u]]", to = paste("\\"", "Average", u, "\\"", sep = ""))
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename.vars(temp, from = "Prices\[\[u\]\]", to = paste("\\"", "Average", u, "\\"", sep = ""))
source('~/.active-rstudio-document', echo=TRUE)
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename.vars(temp, from = "Prices\\[\\[u\\]\\]", to = paste("\\"", "Average", u, "\\"", sep = ""))
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename.vars(temp, from = "Prices\\[\\[u\\]\\]", to = paste("\"", "Average", u, "\"", sep = ""))
}
View(temp)
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename.vars(temp, from = "Prices[[u]]", to = paste("\"", "Average", u, "\"", sep = ""))
}
View(temp)
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename.vars(temp, from = "Prices[[u]]", to = paste("Average", u, sep = ""))
}
View(temp)
AveragePrices <- Prices[!duplicated(Prices$year),]
View(AveragePrices)
View(AveragePrices)
AveragePrices <- Prices[!duplicated(Prices$year), Prices$year]
AveragePrices <- Prices[!duplicated(Prices$year), year]
AveragePrices <- Prices[!duplicated(Prices$year), "year"]
View(AveragePricesPMETA_Index)
fix(AveragePrices)
AveragePrices <- dataframe(Prices[!duplicated(Prices$year), "year"])
AveragePrices <- data.frame(Prices[!duplicated(Prices$year), "year"])
View(AveragePrices)
Names(AveragePrices)
names(AveragePrices)
AveragePrices <- rename.vars(AveragePrices, from = "Prices..duplicated.Prices.year....year..", to = "year")
View(AveragePrices)
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename.vars(temp, from = "Prices[[u]]", to = paste("Average", u, sep = ""))
AveragePrices <- merge(AveragePrices, temp)
}
View(AveragePrices)
?merge
AveragePrices <- data.frame(Prices[!duplicated(Prices$year), "year"])
AveragePrices <- rename.vars(AveragePrices, from = "Prices..duplicated.Prices.year....year..", to = "year")
for (u in vars){
temp <- aggregate(Prices[[u]] ~ year, data = Prices, mean)
temp <- rename.vars(temp, from = "Prices[[u]]", to = paste("Average", u, sep = ""))
AveragePrices <- merge(AveragePrices, temp, all = TRUE)
}
View(AveragePrices)
library(foreign)
Main <- read.dta("/Users/christophergandrud/Dropbox/Jeff/SWF/Christopher/Amelia_Current_1980_For_R_4.dta")
MainAv <- merge(Main, AveragePrices, all = TRUE)
View(MainAv)
?write.dta
write.dta(MainAv, file = "/Users/christophergandrud/Dropbox/Jeff/SWF/Christopher/Amelia_Current_1980_For_R_5.dta")
2006-1988
library(timereg)
install.packages(timereg)
install.packages("timereg")
library(timereg)
?comp.risk
?Surv
library(foreign)
boix <- read.csv("~/Desktop/Boix democracy data.csv")
View(boix)
names(boix)
library(reshape)
boix <- boix[, c(2, 5)]
names(boix)
boix <- rename(boix, c(namecountry = "country"))
boix <- rename(boix, c(democracy = BoixDemocracy))
boix <- rename(boix, c(democracy = "BoixDemocracy"))
names(boix)
library(countrycode)
?countrycode
boix$imfcode <- countrycode(boix$country, origin = "country.name", destination = "imf")
View(boix)
boix <- boix[, c(2:3)]
write.table(boix, file = "~/Desktop/boix.csv", sep = ",")
write.table
?write.table
write.table(boix, file = "~/Desktop/boix.csv", sep = ",", row.names = FALSE)
write.dta(boix, file = "~/Desktop/boix.dta", sep = ",", row.names = FALSE)
write.dta(boix, file = "~/Desktop/boix.dta", sep = ",")
write.dta(boix, file = "~/Desktop/boix.dta")
boix <- read.csv("~/Desktop/Boix democracy data.csv")
boix <- boix[, c(2, 5)]
boix <- rename(boix, c(namecountry = "country"))
boix <- rename(boix, c(democracy = "BoixDemocracy"))
names(boix)
boix$imfcode <- countrycode(boix$country, origin = "country.name", destination = "imf")
boix <- read.csv("~/Desktop/Boix democracy data.csv")
boix <- boix[, c(2, 5)]
boix <- rename(boix, c(namecountry = "country"))
boix <- rename(boix, c(democracy = "BoixDemocracy"))
names(boix)
boix$imfcode <- countrycode(boix$country, origin = "country.name", destination = "imf")
boix <- read.csv("~/Desktop/Boix democracy data.csv")
boix <- rename(boix, c(namecountry = "country"))
boix <- rename(boix, c(democracy = "BoixDemocracy"))
View(boix)
names(boix)
boix$imfcode <- countrycode(boix$country, origin = "country.name", destination = "imf")
boix <- boix[, c(2:3, 5:6)]
names(boix)
boix <- read.csv("~/Desktop/Boix democracy data.csv")
boix <- rename(boix, c(namecountry = "country"))
boix <- rename(boix, c(democracy = "BoixDemocracy"))
names(boix)
boix$imfcode <- countrycode(boix$country, origin = "country.name", destination = "imf")
boix <- boix[, c(3, 5:6)]
names(boix)
write.dta(boix, file = "~/Desktop/boix.dta")
data <- read.csv("~/Desktop/AMC_names_www_2012.23.csv", sep = ";")
data <- read.csv("~/Desktop/AMC_names_www_2012.07.23.csv", sep = ";")
View(data)
library(foreign)
library(timereg)
?Surv
cbsr <- read.dta("~/Desktop/CbMofSrData.dta")
names(cbsr)
SurvO <- Surv(time = _t0, time2 = _t)
cbsr <- read.dta("~/Desktop/CbMofSrData.dta")
SurvO <- Surv(time = time, time2 = time0)
str(cbsr)
SurvO <- Surv(time = time, time2 = time0, x = cbsr)
?table
?timereg
?comp.risk
M1 <- comp.risk(Surv(time = time0, time2 = time, event = c(event == 0) ~ + 1, data = cbsr, causeS = c(reg_4state == 3)))
M1 <- comp.risk(Surv(time = time0, time2 = time, event = c(event == 0) ~ + 1, data = cbsr)
)
M1 <- comp.risk(Surv(time = time0, time2 = time, event = c(event == 0)) ~ + 1, data = cbsr)
M1 <- comp.risk(Surv(time = time0, time2 = time, event = c(event == 0)) ~ + 1, data = cbsr, cause = c(reg_4state == 3))
M1 <- comp.risk(Surv(time = time0, time2 = time, event = c(event == 1)) ~ + 1, data = cbsr, cause = c(reg_4state == 3))
M1 <- comp.risk(Surv(time = time0, time2 = time, event = c(event == 1)) ~ + gdp_2005_nse, data = cbsr, cause = c(reg_4state == 3))
M1 <- comp.risk(Surv(time = time0, time2 = time, event = c(event == 1)) ~ + gdp_2005_nse, data = cbsr, cause = c(reg_4state == 3), cluster = country)
M1 <- comp.risk(Surv(time = time0, time2 = time, event = c(event == 1)) ~ + gdp_2005_nse, data = cbsr, cause = c(reg_4state == 3), clusters = country)
M1 <- comp.risk(Surv(time, event = c(event == 1)) ~ + gdp_2005_nse, data = cbsr, cause = c(reg_4state == 3), clusters = country)
M1 <- comp.risk(Surv(time, event = c(event == 1)) ~ + gdp_2005_nse, data = cbsr, cause = c(reg_4state == 3), clusters = "country")
M1 <- comp.risk(Surv(time, event = c(event == 1)) ~ + gdp_2005_nse, data = cbsr, cause = c("reg_4state" == 3), clusters = "country")
M1 <- comp.risk(Surv(time, event) ~ + gdp_2005_nse, data = cbsr, cause = c("reg_4state" == 3), clusters = "country")
M1 <- comp.risk(Surv(time, event == 0) ~ + gdp_2005_nse, data = cbsr, cause = c("reg_4state" == 3), clusters = "country")
M1 <- comp.risk(Surv(time, compete == 1) ~ + gdp_2005_nse, data = cbsr, cause = cause, clusters = "country")
cbsr <- read.dta("~/Desktop/CbMofSrData.dta")
M1 <- comp.risk(Surv(time, compete == 1) ~ + gdp_2005_nse, data = cbsr, cause = cause, clusters = "country")
View(cbsr)
M1 <- comp.risk(Surv(time, compete == 1) ~ + gdp_2005_nse, data = cbsr, cause = event, clusters = "country")
M1 <- comp.risk(Surv(time, compete == 1) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time, cause = compete) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time2 = time, ) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time0, time2 = time, ) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time0, time2 = time) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time0, time2 = time, cause = compete) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time0, time2 = time, cause = "compete") ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
?Surc
?Surv
M1 <- comp.risk(Surv(time = time0, time2 = time, cause = event) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time0, time2 = time, event == 0) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time0, time2 = time, event == 1) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time0, time2 = time, compete == 0) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time0, time2 = time, compete == 1) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time0, time2 = time, reg_4state == 1) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time0, time2 = time, event == 1) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
M1 <- comp.risk(Surv(time = time0, time2 = time, event == 0) ~ + gdp_2005_nse, data = cbsr, cause = "event", clusters = "country")
amcToday <- read.csv("~/Desktop/AMC_2012.07.30.csv", sep = ";")
View(amcToday)
library(knitcitations)
knitcitation("MatchIt")
?knitcitations
??knitciations
write.bibtex(entry = c("MatchIt"), file = "/git_repositories/GreenBook/Paper/GreenBook.bib", append = TRUE)
####################
# Greenbook Actual Inflation vs. Forecasts Graph
# Christopher Gandrud
# 1 August 2012
####################
library(RCurl)
library(reshape2)
library(ggplot2)
### Load data
# Load data from GitHub
url <- "https://raw.github.com/christophergandrud/GreenBook/master/Data/GB_FRED_cpi.csv"
cpi.data <- getURL(url)
cpi.data <- read.csv(textConnection(cpi.data))
## Other data loading options
#cpi.data <- read.csv("/git_repositories/GreenBook/Data/GB_FRED_cpi.csv") # Load data locally from Christopher's computer
# cpi.data <- read.dta("http://dl.dropbox.com/u/12581470/code/Replicability_code/GreenBook/GB_FRED_cpi.dta") # Load data from Dropbox
### Melt data, i.e. reshape
cpi.abs <- melt(cpi.data, id = "Quarter", measure = c("GB_CPI_QTR2", "deflator"))
### Rename variables
cpi.abs$variable <- gsub("GB_CPI_QTR2", "Forecast", cpi.abs$variable)
cpi.abs$variable <- gsub("deflator", "Actual", cpi.abs$variable)
### Colours
absolute.colors <- c("Forecast" = "#B35B40", "Actual" = "#000000")
### Create line graph
absInflation <- qplot(Quarter, value, geom = "line", data = cpi.abs, color = variable, linetype = variable) +
xlab("") + ylab("Inflation") +
scale_color_manual(values = absolute.colors, name = "") +
scale_linetype(name = "") +
geom_vline(aes(xintercept = 1996), linetype = "dotted", colour = "grey50") +
annotate("text", x = 2001, y = 8.5, label = "FRB/Global", colour = "grey50") +
geom_vline(aes(xintercept = 1975), linetype = "dotted", colour = "grey50") +
annotate("text", x = 1978, y = 1.5, label = "SEM", colour = "grey50") +
theme_bw() +
opts(axis.title.x = theme_text(size = 12, vjust = 0))
print(absInflation)
####################
# Greenbook Inflation Forecast Error by President Party Over Time
# Christopher Gandrud
# 1 August 2012
####################
library(ggplot2)
# Clean up data and create forecast error variable
cpi.data$pres_party_name <- factor(cpi.data$pres_party, label = c("Rep", "Dem"))
cpi.data$error.prop.deflator.q2 <-  (cpi.data$GB_CPI_QTR2 - cpi.data$deflator)/cpi.data$deflator
# Create FRB/Global Model Variable
cpi.data$GlobalModel[cpi.data$Quarter > 1995.4] <- "1"
cpi.data$GlobalModel[cpi.data$Quarter < 1996.1] <- "0"
cpi.data$GlobalModel <- factor(cpi.data$GlobalModel, labels = c("Before 1996", "After 1996"))
# Create Fed Chair variable
cpi.data$Chair[cpi.data$Quarter > 1987.3] <-  "Greenspan"
cpi.data$Chair[cpi.data$Quarter <= 1987.3] <- "Volcker"
cpi.data$Chair[cpi.data$Quarter <= 1979.3] <- "Miller"
cpi.data$Chair[cpi.data$Quarter <= 1978.1] <- "Burns"
cpi.data$Chair[cpi.data$Quarter <= 1970.1] <- "Martin"
cpi.data$Chair <- factor(cpi.data$Chair)
## Remove 2 quarters from Johnson presidency
cpi.data <- subset(cpi.data, president != "Johnson")
cpi.data$president <- as.factor(cpi.data$presTerm)
## Create graph
# Error region +/- 10 percent
rect.time <- data.frame(xmin = 1968, xmax = 2006, ymin = -0.1, ymax = 0.1)
# Partisan colours
partisan.colors = c("Rep" = "#C42B00", "Dem" = "#2259B3")
errors.time <- ggplot(cpi.data, aes(x = Quarter, y = error.prop.deflator.q2)) +
geom_point(aes(color = pres_party_name)) +
stat_smooth(method = "lm", aes(group = presTerm, color = pres_party_name, fill = pres_party_name)) +
geom_rect(data = rect.time, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), color = "grey20", alpha = 0.5, linetype = 0, inherit.aes = FALSE) +
scale_color_manual(values = partisan.colors, name = "") +
scale_fill_manual(values = partisan.colors, name = "") +
xlab("") + ylab("Standardized Forecast Error") +
scale_x_continuous(limits=c(1968, 2006)) +
theme_bw() +
opts(axis.title.x = theme_text(size = 12, vjust = 0)) +
opts(axis.title.y = theme_text(angle = 90, size = 12, vjust = 0.3))
print(errors.time)
?knit
amcToday <- read.csv("~/Desktop/AMC_2012.07.30.csv", sep = ";")
View(amcToday)
?complete.cases
# Load required packages
library(reshape)
library(countrycode)
library(stringr)
library(xtable)
# Set working directory and load the data.
setwd("/git_repositories/amcData/BaseFiles/AMCStart/")
# Load data
amcStart <- read.csv("AMCStartUpdate1.csv", sep = ";")
# Set working directory and load the data.
setwd("/git_repositories/amcData/BaseFiles/AMCStart/")
# Load data
amcStart <- read.csv("AMCStartUpdate1.csv", sep = ";")
View(amcStart)
amcStart <- amcStart[-1, ]
View(amcStart)
amcStart <- amcStart[1:90, ]
View(amcStart)
amcStart <- amcStart[!is.na(amcStart$Country), ]
View(amcStart)
amcStart <- amcStart[!is.na(amcStart$Country) ]
amcStart <- amcStart[,!is.na(amcStart$Country) ]
# Set working directory and load the data.
setwd("/git_repositories/amcData/BaseFiles/AMCStart/")
# Load data
amcStart <- read.csv("AMCStartUpdate1.csv", sep = ";")
# Keep AMCs
amcStart <- amcStart[-1, ]
amcStart <- amcStart[1:90, ]
amcStart <- amcStart[!is.na(amcStart$Country), ]
View(amcStart)
amcStart <- amcStart[!is.na(amcStart$Country)]
names(amcStart)
amcStart <- amcStart[!is.na(amcStart$Country)]
amcStart <- amcStart[!is.na(amcStart$Country),]
View(amcStart)
amcStart <- amcStart[!is.na(as.character(amcStart$Country)),]
View(amcStart)
amcStart <- amcStart[amcStart$Country != "Additional"]
amcStart <- amcStart[amcStart$Country != "Additional", ]
View(amcStart)
amcStart <- subset(amcStart, Country != "Additional")
View(amcStart)
amcStart <- subset(amcStart, Country != "ADDITIONAL")
View(amcStart)
amcStart <- subset(amcStart, Country != "")
View(amcStart)
amcStart <- rename(amcStart, c(Country = "country", X.1 = "AMCStartYear"))
View(amcStart)
setwd("/git_repositories/amcData/BaseFiles/AMCStart/")
# Load data
amcStart <- read.csv("AMCStartUpdate1.csv", sep = ";")
# Keep AMCs
amcStart <- amcStart[-1, ]
amcStart <- amcStart[1:90, ]
amcStart <- subset(amcStart, Country != "ADDITIONAL")
amcStart <- subset(amcStart, Country != "")
# Rename variables
amcStart <- rename(amcStart, c(Country = "country", Crisis.Start = "CrisisYear", X.1 = "AMCStartYear"))
View(amcStart)
# Set working directory and load the data.
setwd("/git_repositories/amcData/BaseFiles/AMCStart/")
# Load data
amcStart <- read.csv("AMCStart.csv", sep = ";")
# Keep Laeven & Valencia AMCs
amcStart <- amcStart[1:68, c("Country", "Crisis.Start","AMC.start")]
# Rename variables
amcStart <- rename(amcStart, c(Country = "country", X = "CrisisYear", AMC.start = "AMCStartYear"))
View(amcStart)
# Set working directory and load the data.
setwd("/git_repositories/amcData/BaseFiles/AMCStart/")
# Load data
amcStart <- read.csv("AMCStartUpdate1.csv", sep = ";")
# Keep AMCs
amcStart <- amcStart[-1, ]
amcStart <- amcStart[1:90, ]
amcStart <- subset(amcStart, Country != "ADDITIONAL")
amcStart <- subset(amcStart, Country != "")
View(amcStart)
amcStart <- subset(amcStart, AMC...DF...BB != "GB")
View(amcStart)
# Load data
amcStart <- read.csv("AMCStartUpdate1.csv", sep = ";")
# Keep AMCs
amcStart <- amcStart[-1, ]
amcStart <- amcStart[1:90, ]
amcStart <- subset(amcStart, Country != "ADDITIONAL")
amcStart <- subset(amcStart, Country != "")
amcStart <- subset(amcStart, AMC...DF...BB != "GB")
amcStart <- subset(amcStart, AMC...DF...BB != "stabil fund")
View(amcStart)
amcStart <- subset(amcStart, X.1 != "")
View(amcStart)
?na.omit
# Load required packages
library(RCurl)
library(ggplot2)
library(Zelig)
# Load data from the GitHub site
url <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
mainCountry <- getURL(url)
mainCountry <- read.csv(textConnection(mainCountry))
