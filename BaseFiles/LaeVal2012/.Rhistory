Test <- dplyr::mutate(Test, PercRank = perc.rank(QI))
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = (PercRank/1000)))
Sim1 <- coxsimLinear(M1, b = "AgeMed", Xj = seq(-15, 19, by = 0.2),
qi = "Hazard Ratio", nsim = 1000)
class(Sim1) <- 'data.frame'
perc.rank <- function(x) trunc(rank(x))/length(x)
Test <- group_by(Sim1, Xj)
Test <- dplyr::mutate(Test, PercRank = perc.rank(QI))
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = (PercRank/1000)))
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank))
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank)) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + theme_bw()
Test$PercRank <- abs(Test$PercRank - 0.5)
View(Test)
Test$PercRank <- abs(0.5 - Test$PercRank)
View(Test)
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + theme_bw()
max(Test$PercRank)
?scale_alpha
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha(guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha(to = c(o, 0.2), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha(to = c(0, 0.2), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(to = c(0, 0.2), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.2), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.01), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.05), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1), trans=Trans$new("sqr", function(x) x^2, function(x) sqrt(x), function(x) sqrt(x)), legend=F)) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1), trans=Trans$new("sqr", function(x) x^2, function(x) sqrt(x), function(x) sqrt(x)), legend=F) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1), trans=Trans$new("sqr", function(x) x^2, function(x) sqrt(x), function(x) sqrt(x)), guide = FALSE) + theme_bw()
range(Test$PercRank)
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank^2), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.05), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank^2), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1), guide = FALSE) + theme_bw()
?round
Sim1 <- coxsimLinear(M1, b = "AgeMed", Xj = seq(-15, 19, by = 0.2),
qi = "Hazard Ratio", nsim = 1000)
class(Sim1) <- 'data.frame'
perc.rank <- function(x) trunc(rank(x))/length(x)
Test <- group_by(Sim1, Xj)
Test <- dplyr::mutate(Test, PercRank = perc.rank(QI))
# Center on the 50th percentile
Test$PercRank <- abs(Test$PercRank - 0.5)
Test$PercRank <- round(abs(0.5 - Test$PercRank), 0.1)
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.2), guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1)) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_point(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1)) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_point(aes(alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1)) + theme_bw()
Sim1 <- coxsimLinear(M1, b = "AgeMed", Xj = seq(-15, 19, by = 0.2),
qi = "Hazard Ratio", nsim = 1000)
class(Sim1) <- 'data.frame'
perc.rank <- function(x) trunc(rank(x))/length(x)
Test <- group_by(Sim1, Xj)
Test <- dplyr::mutate(Test, PercRank = perc.rank(QI))
# Center on the 50th percentile
Test$PercRank <- abs(Test$PercRank - 0.5)
Test$PercRank <- round(abs(0.5 - Test$PercRank), 0.2)
ggplot(Test, aes(Xj, QI)) + geom_point(aes(alpha = PercRank), colour = 'blue') + theme_bw()
summary(Test$PercRank)
?round
Test <- group_by(Sim1, Xj)
Test <- dplyr::mutate(Test, PercRank = perc.rank(QI))
# Center on the 50th percentile
Test$PercRank <- abs(Test$PercRank - 0.5)
Test$PercRank <- round(abs(0.5 - Test$PercRank), 1)
ggplot(Test, aes(Xj, QI)) + geom_point(aes(alpha = PercRank), colour = 'blue') + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_point(aes(alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1)) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1)) + theme_bw()
Sim1 <- coxsimLinear(M1, b = "AgeMed", Xj = seq(0, 19, by = 0.1),
qi = "Hazard Ratio", nsim = 1000)
class(Sim1) <- 'data.frame'
perc.rank <- function(x) trunc(rank(x))/length(x)
Test <- group_by(Sim1, Xj)
Test <- dplyr::mutate(Test, PercRank = perc.rank(QI))
# Center on the 50th percentile
Test$PercRank <- abs(Test$PercRank - 0.5)
Test$PercRank <- round(abs(0.5 - Test$PercRank), 1)
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1)) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1) + guide = FALSE) + theme_bw()
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1), guide = FALSE) + theme_bw()
library("survival")library("simPH")library("ggplot2")library("gridExtra")library('dplyr')#### Illustration of linear effects##### Load hmohiv data from UCLA repositoryhmohiv <- read.table(  "http://www.ats.ucla.edu/stat/r/examples/asa/hmohiv.csv",   sep = ",", header = TRUE)# Center age at its median (35)hmohiv$AgeMed <- hmohiv$age - 35M1 <- coxph(Surv(time, censor) ~ AgeMed + drug,             method = "breslow", data = hmohiv)# Simulate relative hazardsSim1 <- coxsimLinear(M1, b = "AgeMed", Xj = seq(0, 19, by = 0.1),                     qi = "Hazard Ratio", nsim = 1000)class(Sim1) <- 'data.frame'perc.rank <- function(x) trunc(rank(x))/length(x)Test <- group_by(Sim1, Xj)Test <- dplyr::mutate(Test, PercRank = perc.rank(QI))# Center on the 50th percentileTest$PercRank <- abs(Test$PercRank - 0.5)Test$PercRank <- round(abs(0.5 - Test$PercRank), 1)ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1), guide = FALSE) + theme_bw()
library("survival")
library("simPH")
library("ggplot2")
library("gridExtra")
library('dplyr')
#### Illustration of linear effects####
# Load hmohiv data from UCLA repository
hmohiv <- read.table(
"http://www.ats.ucla.edu/stat/r/examples/asa/hmohiv.csv",
sep = ",", header = TRUE)
# Center age at its median (35)
hmohiv$AgeMed <- hmohiv$age - 35
M1 <- coxph(Surv(time, censor) ~ AgeMed + drug,
method = "breslow", data = hmohiv)
# Simulate relative hazards
Sim1 <- coxsimLinear(M1, b = "AgeMed", Xj = seq(0, 19, by = 0.1),
qi = "Hazard Ratio", nsim = 1000)
class(Sim1) <- 'data.frame'
perc.rank <- function(x) trunc(rank(x))/length(x)
Test <- group_by(Sim1, Xj)
Test <- dplyr::mutate(Test, PercRank = perc.rank(QI))
# Center on the 50th percentile
Test$PercRank <- abs(Test$PercRank - 0.5)
Test$PercRank <- round(abs(0.5 - Test$PercRank), 1)
ggplot(Test, aes(Xj, QI)) + geom_line(aes(group = SimID, alpha = PercRank), colour = 'blue') + scale_alpha_continuous(range = c(0, 0.1), guide = FALSE) + theme_bw()
Fill <- 'Xj'
Test <- group_by(Sim1, Fill)
?coxsimInteract
library(simPH)
?coxsimInteract
library(stringr)
library(xtable)
library(countrycode)
# Set working directory and load the data.
setwd("/git_repositories/amcData/BaseFiles/LaeVal2012")
# Input data and transform it into long format
restruct <- read.csv("LavValPolicies.csv")
# Take the matrix transpose to reshape the data from wide to long format.
restruct <- t(restruct)
# Remove phantom column
restruct <- restruct[, -26]
# Create list of variables and descriptions
Description <- restruct[1, ]
c <- c("Country")
Description <- append(c, values = Description)
Description <- str_trim(Description)
ColNames <- c("country", "CrisisDate", "CrisisDateSystemic", "CurrencyCrisis", "YearCurrencyCrisis", "SovereignCrisis", "YearSovereignCrisis", "CreditBoom", "CreditorRights", "CreditorRightsIndex", "DepositIns", "YearDICreated", "DICoverageLimit", "DICoverageRatio", "DepositFreeze", "DateDepositFreeze", "DurationDepositFreeze", "TimeDepositsFreeze", "BankHoliday", "DateBankHoliday", "DurationBankHoliday", "BankGuaranteee", "DateBankGuaranteeStart", "DateBankGuaranteeEnd", "BankGuaranteeDuration", "BankGuaranteeCoverage", "EmergencyLending", "DateEmergencyLending", "PeakLendingSupport", "BankRestructuring", "Nationalizations", "AssetPurchases", "AMC", "Recap", "RecapCosts", "RecoveryDummy", "RecoveryProceeds", "GovRecapCosts", "DepositorLosses", "DepositorLosesSeverity", "MonetaryPolicyIndex", "AverageReserveChange", "FiscalPolicyIndex", "IncreasePublicDebt", "IMFProgram", "YearIMFProgram", "PeakNPLs", "NetFiscalCosts", "GrossFiscalCosts", "FiveYearRecovery", "OutputLoss")
View(restruct)
write.table(restruct, file = "restruct.csv", sep = ",")
# Remove % sign
RestructPercent <- readLines("restruct.csv")
RestructPercent <- gsub("%", "", RestructPercent)
write(RestructPercent, file = "restruct.csv")
restruct <- read.csv("restruct.csv", row.names = NULL, col.names = ColNames)
unlink("restruct.csv")
View(restruct)
restruct <- restruct[-1, ]
View(restruct)
# Clean up country names and create IMF code indexing
restruct$country <- gsub(".[0-9]", "", restruct$country)
restruct$country <- gsub("\\.", " ", restruct$country)
restruct$imfcode <- countrycode(restruct$country, origin = "country.name", destination = "imf")
# Clean up dates
restruct$CrisisDate[restruct$country == "Sri Lanka"] <- 1989
restruct$CrisisDate <- gsub("1988", "Jan-88", restruct$CrisisDate)
restruct$CrisisDate <- gsub("1989", "Jan-89", restruct$CrisisDate)
restruct$CrisisDate <- paste(restruct$CrisisDate, "-01", sep = "")
restruct$CrisisDate <- as.Date(restruct$CrisisDate, "%b-%y-%d")
restruct$year <- as.numeric(str_extract(restruct$CrisisDate, "[0-9][0-9][0-9][0-9]"))
# Clean up DICoverageLimit variable values
restruct$DICoverageLimit <- gsub(",", "", restruct$DICoverageLimit)
restruct$DICoverageLimit <- gsub("-", "", restruct$DICoverageLimit)
restruct$DICoverageLimit <- gsub("Unlimited", "Full", restruct$DICoverageLimit)
View(restruct)
# Recode AMC variable
restruct$AMC <- as.numeric(restruct$AMC)
restruct$AMCType[restruct$AMC == 1] <- "None"
restruct$AMCType[restruct$AMC == 2] <- "Centralised"
restruct$AMCType[restruct$AMC == 3] <- "Decentralised"
# Sweden reclassified as decentralised
restruct$AMCType[restruct$country == "Sweden" & restruct$year == 1991] <- "Decentralised"
## Brazil PROER classify as AMC
restruct$AMC[restruct$country == "Brazil" & restruct$year == 1994] <- 3
restruct$AMCType[restruct$country == "Brazil" & restruct$year == 1994] <- "Decentralised"
restruct$AMC[restruct$AMC > 1] <- 2
restruct$AMC <- factor(restruct$AMC, labels = c("NoAMC", "AMCCreated"))
View(restruct)
summary(restruct)
View(restruct)
LV <- read.csv("/git_repositories/amcData/MainData/CleanedPartial/LvData.csv")
View(LV)
############
# Clean Up Laeven & Valencia (2012) Banking Crisis Data
# Christopher Gandrud
# Updated 26 July 2012
############
## Laeven & Valencia (2012) data can be found at: http://www.imf.org/external/pubs/cat/longres.aspx?sk=26015.0
## The data set 'SYSTEMIC BANKING CRISES DATABASE.xlsx' was downloaded.
## The 'Additional Details' sheet was saved as a .csv file called  'LaeValPolicies.csv' in a folder called LavVal2012.
## I hand deleted the heading rows.
# Load required packages
library(stringr)
library(xtable)
library(countrycode)
# Set working directory and load the data.
setwd("/git_repositories/amcData/BaseFiles/LaeVal2012")
# Input data and transform it into long format
restruct <- read.csv("LavValPolicies.csv")
# Take the matrix transpose to reshape the data from wide to long format.
restruct <- t(restruct)
# Remove phantom column
restruct <- restruct[, -26]
# Create list of variables and descriptions
Description <- restruct[1, ]
c <- c("Country")
Description <- append(c, values = Description)
Description <- str_trim(Description)
ColNames <- c("country", "CrisisDate", "CrisisDateSystemic", "CurrencyCrisis", "YearCurrencyCrisis", "SovereignCrisis", "YearSovereignCrisis", "CreditBoom", "CreditorRights", "CreditorRightsIndex", "DepositIns", "YearDICreated", "DICoverageLimit", "DICoverageRatio", "DepositFreeze", "DateDepositFreeze", "DurationDepositFreeze", "TimeDepositsFreeze", "BankHoliday", "DateBankHoliday", "DurationBankHoliday", "BankGuaranteee", "DateBankGuaranteeStart", "DateBankGuaranteeEnd", "BankGuaranteeDuration", "BankGuaranteeCoverage", "EmergencyLending", "DateEmergencyLending", "PeakLendingSupport", "BankRestructuring", "Nationalizations", "AssetPurchases", "AMC", "Recap", "RecapCosts", "RecoveryDummy", "RecoveryProceeds", "GovRecapCosts", "DepositorLosses", "DepositorLosesSeverity", "MonetaryPolicyIndex", "AverageReserveChange", "FiscalPolicyIndex", "IncreasePublicDebt", "IMFProgram", "YearIMFProgram", "PeakNPLs", "NetFiscalCosts", "GrossFiscalCosts", "FiveYearRecovery", "OutputLoss")
# Create table and markdown file of variable descriptions.
VarList <- cbind(ColNames, Description)
VarList <- xtable(VarList)
LvVariableTable <- print(VarList, type = "html")
cat("# Variables Labels and Variable Descriptions for Laeven & Valencia's (2012) Restructuring Data\n ### See: <http://www.imf.org/external/pubs/cat/longres.aspx?sk=26015.0>\n\n", LvVariableTable, file = "/git_repositories/amcData/MainData/VariableDescriptions/LaevenValenciaVariableDescriptions.md")
# Write new table. I did this to get around a problem correctly naming the reshaped variables.
write.table(restruct, file = "restruct.csv", sep = ",")
# Remove % sign
RestructPercent <- readLines("restruct.csv")
RestructPercent <- gsub("%", "", RestructPercent)
write(RestructPercent, file = "restruct.csv")
restruct <- read.csv("restruct.csv", row.names = NULL, col.names = ColNames)
unlink("restruct.csv")
restruct <- restruct[-1, ]
# Clean up country names and create IMF code indexing
restruct$country <- gsub(".[0-9]", "", restruct$country)
restruct$country <- gsub("\\.", " ", restruct$country)
restruct$imfcode <- countrycode(restruct$country, origin = "country.name", destination = "imf")
# Clean up dates
restruct$CrisisDate[restruct$country == "Sri Lanka"] <- 1989
restruct$CrisisDate <- gsub("1988", "Jan-88", restruct$CrisisDate)
restruct$CrisisDate <- gsub("1989", "Jan-89", restruct$CrisisDate)
restruct$CrisisDate <- paste(restruct$CrisisDate, "-01", sep = "")
restruct$CrisisDate <- as.Date(restruct$CrisisDate, "%b-%y-%d")
restruct$year <- as.numeric(str_extract(restruct$CrisisDate, "[0-9][0-9][0-9][0-9]"))
# Clean up DICoverageLimit variable values
restruct$DICoverageLimit <- gsub(",", "", restruct$DICoverageLimit)
restruct$DICoverageLimit <- gsub("-", "", restruct$DICoverageLimit)
restruct$DICoverageLimit <- gsub("Unlimited", "Full", restruct$DICoverageLimit)
# Recode AMC variable
restruct$AMC <- as.numeric(restruct$AMC)
restruct$AMCType[restruct$AMC == 1] <- "None"
restruct$AMCType[restruct$AMC == 2] <- "Centralised"
restruct$AMCType[restruct$AMC == 3] <- "Decentralised"
# Sweden reclassified as decentralised
restruct$AMCType[restruct$country == "Sweden" & restruct$year == 1991] <- "Decentralised"
## Brazil PROER classify as AMC
restruct$AMC[restruct$country == "Brazil" & restruct$year == 1994] <- 3
restruct$AMCType[restruct$country == "Brazil" & restruct$year == 1994] <- "Decentralised"
restruct$AMC[restruct$AMC > 1] <- 2
restruct$AMC <- factor(restruct$AMC, labels = c("NoAMC", "AMCCreated"))
# Reorder variables so that year is at the end
vars <- c("country", "CrisisDate", "CrisisDateSystemic", "CurrencyCrisis",
"YearCurrencyCrisis", "SovereignCrisis", "YearSovereignCrisis",
"CreditBoom", "CreditorRights", "CreditorRightsIndex", "DepositIns",
"YearDICreated", "DICoverageLimit", "DICoverageRatio", "DepositFreeze",
"DateDepositFreeze", "DurationDepositFreeze", "TimeDepositsFreeze",
"BankHoliday", "DateBankHoliday", "DurationBankHoliday", "BankGuaranteee",
"DateBankGuaranteeStart", "DateBankGuaranteeEnd", "BankGuaranteeDuration",
"BankGuaranteeCoverage", "EmergencyLending", "DateEmergencyLending",
"PeakLendingSupport", "BankRestructuring", "Nationalizations",
"AssetPurchases", "AMC", "Recap", "RecapCosts", "RecoveryDummy",
"RecoveryProceeds", "GovRecapCosts", "DepositorLosses", "DepositorLosesSeverity",
"MonetaryPolicyIndex", "AverageReserveChange", "FiscalPolicyIndex",
"IncreasePublicDebt", "IMFProgram", "YearIMFProgram", "PeakNPLs",
"NetFiscalCosts", "GrossFiscalCosts", "FiveYearRecovery", "OutputLoss",
"imfcode", "AMCType", "year")
restruct <- restruct[, vars]
# Add Changes to the data file and Create Notes of the changes
Notes <- c("- Brazil's PROER was added as a **AMC** and classified as 'Decentralised' in the **AMCType** variable. It was created in 1996. More details can be found the Banco Central Do Brazil's website <http://www.bcb.gov.br/?PROEREN>.", "\n- Sweden 1991 reclassified as having decentralised AMCs. See: <http://www.clevelandfed.org/research/PolicyDis/pdp21.pdf?WT.oss=Import+Prices&WT.oss_r=1730>")
cat("\n\n# Notes on changes made to Laeven and Valencia (2012) data\n\n", Notes, file = "/git_repositories/amcData/MainData/VariableDescriptions/LaevenValenciaVariableDescriptions.md", append = TRUE)
# Save cleaned data file
write.table(restruct, file = "/git_repositories/amcData/MainData/CleanedPartial/LvData.csv", sep = ",", row.names = FALSE)
LV <- read.csv("/git_repositories/amcData/MainData/CleanedPartial/LvData.csv")
View(LV)
library(DataCombine)
LV <- MoveFront(LV, c('imfcode', 'year'))
View(LV)
rmExcept('LV')
View(LV)
Others <- read.csv("/git_repositories/amcData/MainData/amcCountryYear.csv")
'economic_abs', 'legal_abs', 'GDPperCapita', 'GDPCurrent')
KeepVars <- c('imfcode', 'year', 'polity2', 'UDS', 'percent1', 'percentl', 'prtyin',
'economic_abs', 'legal_abs', 'GDPperCapita', 'GDPCurrent')
SlimOthers <- Others[, KeepVars]
names(Others)
KeepVars <- c('imfcode', 'year', 'polity2', 'UDS', 'percent1', 'percentl', 'prtyin',
'economic_abs', 'legal_abs', 'GDPperCapita', 'GDPCurrentUSD',
'DomesticCredit', 'TradeOpen', 'ClaimsOnGov', 'CentGovDebt',
'ExternDebtTotalGDP',)
KeepVars <- c('imfcode', 'year', 'polity2', 'UDS', 'percent1', 'percentl', 'prtyin',
'economic_abs', 'legal_abs', 'GDPperCapita', 'GDPCurrentUSD',
'DomesticCredit', 'TradeOpen', 'ClaimsOnGov', 'CentGovDebt',
'ExternDebtTotalGDP')
SlimOthers <- Others[, KeepVars]
KeepVars <- c('imfcode', 'year', 'polity2', 'UDS', 'percent1', 'percentl', 'prtyin',
'economic_abs', 'legal_abs', 'GDPperCapita', 'GDPCurrentUSD',
'DomesticCredit', 'TradeOpen', 'ClaimsOnGov', 'CentGovDebt',
'ExternDebtTotalGDP', 'IMF.AMC')
SlimOthers <- Others[, KeepVars]
Comb <- merge(LV, SlimOthers, by = c('imfcode', 'year'), all.x = TRUE)
View(Comb)
library(Zelig)
View(Comb)
View(Comb)
Comb$AMCNum[Comb$AMC == 'AMCCreated'] <- 1
Comb$AMCNum <- 0
Comb$AMCNum[Comb$AMC == 'AMCCreated'] <- 1
View(Comb)
Test <- zelig(AMCNum ~ economic_abs, data = Comb, model = 'probit')
Test <- zelig(AMCNum ~ economic_abs, data = Comb, model = 'probit', cite = FALSE)
summary(Test)
Test <- zelig(AMCNum ~ UDS, data = Comb, model = 'probit', cite = FALSE)
summary(Test)
Test <- zelig(AMCNum ~ PeakNPL, data = Comb, model = 'probit', cite = FALSE)
names(Comb)
Test <- zelig(AMCNum ~ PeakNPLs, data = Comb, model = 'probit', cite = FALSE)
summary(Test)
View(Comb)
Test <- zelig(AMCNum ~ PeakLendingSupport, data = Comb, model = 'probit', cite = FALSE)
summary(Test)
Test <- zelig(AMCNum ~ prtyin, data = Comb, model = 'probit', cite = FALSE)
summary(Test)
Test <- zelig(AMCNum ~ prtyin, data = Comb, model = 'logit', cite = FALSE)
summary(Test)
Test <- zelig(AMCNum ~ GDPperCapita, data = Comb, model = 'logit', cite = FALSE)
summary(Test)
View(Comb)
Test <- zelig(AMCType ~ GDPperCapita, data = Comb, model = 'mlogit', cite = FALSE)
install.packages("ZeligChoice", repos="http://r.iq.harvard.edu/", type="source")
library("ZeligChoice")
source('~/.active-rstudio-document', echo=TRUE)
Test <- zelig(AMCType ~ GDPperCapita, data = Comb, model = 'mlogit', cite = FALSE)
Test <- zelig(AMCType ~ prtyin, data = Comb, model = 'mlogit', cite = FALSE)
Comb$AMCTypeNum <- 0
View(Comb)
Comb$AMCTypeNum[Comb$AMCType == 'Decentralised'] <- 1
Comb$AMCTypeNum[Comb$AMCType == 'Centralised'] <- 2
View(Comb)
Test <- zelig(AMCType ~ prtyin, data = Comb, model = 'mlogit', cite = FALSE)
View(Comb)
View(Comb)
Test <- zelig(OutputLoss ~ prtyin, data = Comb, model = 'normal', cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ prtyin, data = Comb, model = 'normal', robust = list(method = 'weave') cite = FALSE)
Test <- zelig(OutputLoss ~ prtyin, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ UDS, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ GDPperCapita, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
plot(Comb$prtyin, Comb$Outputloss)
plot(log(Comb$prtyin), Comb$Outputloss)
plot(Comb$UDS, Comb$Outputloss)
plot(Comb$UDS, Comb$PealNPLs)
plot(Comb$UDS, Comb$PealNPLs)
plot(Comb$UDS, Comb$PealNPLs)
plot(log(Comb$UDS), Comb$PealNPLs)
plot(Comb$UDS, Comb$GrossFiscalCosts)
plot(log(Comb$GDPperCapita), Comb$GrossFiscalCosts)
plot(log(Comb$GDPperCapita), Comb$PeakNPLs)
plot(log(Comb$GDPperCapita), log(Comb$PeakNPLs))
plot(log(Comb$GDPperCapita), log(Comb$OutputLoss))
plot(log(Comb$GDPperCapita), Comb$OutputLoss)
plot(log(Comb$economic_abs), Comb$OutputLoss)
plot(Comb$economic_abs, Comb$OutputLoss)
plot(Comb$economic_abs, log(Comb$OutputLoss))
plot(Comb$economic_abs, Comb$IncreasePublicDebt)
plot(Comb$economic_abs, Comb$AverageReserveChange)
plot(Comb$economic_abs, Comb$RecapCosts)
plot(Comb$economic_abs, Comb$PeakLendingSupport)
plot(Comb$CentGovDebt, Comb$PeakLendingSupport)
plot(Comb$TradeOpen, Comb$PeakLendingSupport)
plot(log(Comb$TradeOpen), Comb$PeakLendingSupport)
plot(Comb$DomesticCredit, Comb$PeakLendingSupport)
plot(legal_abs, Comb$PeakLendingSupport)
plot(Comb$legal_abs, Comb$PeakLendingSupport)
plot(Comb$OutputLoss, Comb$PeakLendingSupport)
library(Correlplot)
pairs(~OutputLoss + PeakLendingSupport + IncreasePublicDebt + GrossFiscalCosts + PeakNPLs + economic_abs + legal_abs + log(GDPperCapita) + log(GDPCurrentUSD) + UDS + polity2 + CentGovDebt, data = Comb)
?pairs
pairs(~OutputLoss + PeakLendingSupport + IncreasePublicDebt + GrossFiscalCosts + PeakNPLs + economic_abs + legal_abs + log(GDPperCapita) + log(GDPCurrentUSD) + UDS + polity2 + CentGovDebt, data = Comb, upper.panel = "")
pairs(~OutputLoss + PeakLendingSupport + IncreasePublicDebt + GrossFiscalCosts + PeakNPLs + economic_abs + legal_abs + log(GDPperCapita) + log(GDPCurrentUSD) + UDS + polity2 + CentGovDebt, data = Comb, upper.panel = FALSE)
pairs(~OutputLoss + PeakLendingSupport + IncreasePublicDebt + GrossFiscalCosts + PeakNPLs + economic_abs + legal_abs + log(GDPperCapita) + log(GDPCurrentUSD) + UDS + polity2 + CentGovDebt, data = Comb)
scatterplot.matrix(~OutputLoss + log(PeakLendingSupport) + IncreasePublicDebt + GrossFiscalCosts + PeakNPLs + economic_abs + legal_abs + log(GDPperCapita) + log(GDPCurrentUSD) + UDS + polity2 + CentGovDebt, data = Comb)
library(car)
scatterplot.matrix(~OutputLoss + log(PeakLendingSupport) + IncreasePublicDebt + GrossFiscalCosts + PeakNPLs + economic_abs + legal_abs + log(GDPperCapita) + log(GDPCurrentUSD) + UDS + polity2 + CentGovDebt, data = Comb)
scatterplot.matrix(~OutputLoss + log(PeakLendingSupport) + IncreasePublicDebt + log(GrossFiscalCosts) + PeakNPLs + economic_abs + legal_abs + log(GDPperCapita) + log(GDPCurrentUSD) + UDS + polity2 + CentGovDebt, data = Comb)
scatterplot.matrix(~OutputLoss + log(PeakLendingSupport) + IncreasePublicDebt + GrossFiscalCosts + PeakNPLs + economic_abs + legal_abs + log(GDPperCapita) + log(GDPCurrentUSD) + UDS + polity2 + CentGovDebt, data = Comb)
?scatterplot.matrix
CorData <- Comb[, c(OutputLoss, PeakLendingSupport, IncreasePublicDebt, GrossFiscalCosts, PeakNPLs, economic_abs, legal_abs, GDPperCapita, GDPCurrentUSD, UDS, polity2, CentGovDebt)]
CorData <- Comb[, c('OutputLoss', "PeakLendingSupport", "IncreasePublicDebt", 'GrossFiscalCosts', "PeakNPLs", 'economic_abs', 'legal_abs', 'GDPperCapita', 'GDPCurrentUSD', 'UDS', 'polity2', 'CentGovDebt', 'prtyin')]
corrgram(CorData)
library(corrgram)
corrgram(CorData)
corrgram(CorData, upper.panel=panel.pts)
Comb$logGDPperCapita <- log(Comb$GDPperCapita)
Comb$logCurrentUSD <- log(Comb$GDPCurrentUSD)
CorData <- Comb[, c('OutputLoss', "PeakLendingSupport", "IncreasePublicDebt", 'GrossFiscalCosts', "PeakNPLs", 'economic_abs', 'legal_abs', 'logGDPperCapita', 'logGDPCurrentUSD', 'UDS', 'polity2', 'CentGovDebt', 'prtyin')]
Comb$logGDPCurrentUSD <- log(Comb$GDPCurrentUSD)
CorData <- Comb[, c('OutputLoss', "PeakLendingSupport", "IncreasePublicDebt", 'GrossFiscalCosts', "PeakNPLs", 'economic_abs', 'legal_abs', 'logGDPperCapita', 'logGDPCurrentUSD', 'UDS', 'polity2', 'CentGovDebt', 'prtyin')]
corrgram(CorData, upper.panel=panel.pts)
Test <- zelig(OutputLoss ~ AMCType, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
library(Test)
Test <- zelig(OutputLoss ~ factor(AMCType), data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(IncreasePublicGebt ~ factor(AMCType), data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
Test <- zelig(IncreasePublicDebt ~ factor(AMCType), data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ factor(AMCType), data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(factor(AMCType) ~ economic_abs, data = Comb, model = 'mlogit', robust = list(method = "weave"), cite = FALSE)
Test <- zelig(as.factor(AMCType) ~ economic_abs, data = Comb, model = 'mlogit', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ factor(AMCType) + economic_abs, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ factor(AMCType)*economic_abs, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ factor(AMCType) + UDS, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + UDS, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ factor(AMCType) + UDS + PeakNPLS, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
Test <- zelig(GrossFiscalCosts ~ factor(AMCType) + UDS + PeakNPLs, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ factor(AMCType) + PeakNPLs, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(as.factor(AMCType) ~ prtyin, data = Comb, model = 'mlogit', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(as.factor(AMCType) ~ prtyin, data = Comb, model = 'mlogit', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ factor(AMCType) + GDPperCapita, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + GDPpercapita , data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
Test <- zelig(OutputLoss ~ factor(AMCType) + GDPperCapita , data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ as.factor(AMCType) + GDPperCapita, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(as.factor(AMCType) ~ as.factor('DepositIns'), data = Comb, model = 'mlogit', robust = list(method = "weave"), cite = FALSE)
Test <- zelig(as.factor(AMCType) ~ as.factor(DepositIns), data = Comb, model = 'mlogit', robust = list(method = "weave"), cite = FALSE)
summary(Test)
?zelig
Test <- zelig(as.factor(AMCType) ~ polity2, data = Comb, model = 'mlogit', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ as.factor(AMCType) + GDPperCapita, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ as.factor(AMCType) + GDPperCapita + PeakLendingSupport, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ as.factor(AMCType) + GDPperCapita + PeakLendingSupport + UDS, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ as.factor(AMCType) + GDPperCapita + PeakLendingSupport + polity2, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + GDPperCapita + PeakLendingSupport + polity2, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + GDPperCapita + PeakLendingSupport + polity2, data = Comb, model = 'normal.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + GDPperCapita + PeakLendingSupport + prtyin, data = Comb, model = 'normal.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + GDPperCapita + PeakLendingSupport + polity2, data = Comb, model = 'normal.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + GDPperCapita + PeakLendingSupport + PeakNPLs + polity2, data = Comb, model = 'normal.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + GDPperCapita + PeakLendingSupport + PeakNPLs, data = Comb, model = 'normal.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + GDPperCapita + PeakLendingSupport + PeakNPLs, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + GDPperCapita + PeakLendingSupport + PeakNPLs + polity2, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + log(GDPperCapita) + PeakLendingSupport + PeakNPLs + polity2, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + log(GDPperCapita) + PeakLendingSupport + PeakNPLs + polity2, data = Comb, model = 'normal.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(OutputLoss ~ factor(AMCType) + log(GDPperCapita) + PeakLendingSupport + PeakNPLs + polity2 + economic_abs, data = Comb, model = 'normal.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ factor(AMCType) + log(GDPperCapita) + PeakLendingSupport + PeakNPLs + polity2 + economic_abs, data = Comb, model = 'normal', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(GrossFiscalCosts ~ factor(AMCType) + log(GDPperCapita) + PeakLendingSupport + PeakNPLs + polity2 + economic_abs, data = Comb, model = 'normal.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(as.factor(AMCType) ~ economic_abs, data = Comb, model = 'mlogit', robust = list(method = "weave"), cite = FALSE)
summary(Test)
hist(economic_abs)
hist(Comb$economic_abs)
Test <- zelig(as.factor(AMCNum) ~ as.factor(CreditorRightsIndex), data = Comb, model = 'logit', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(as.factor(AMCNum) ~ as.numeric(CreditorRightsIndex), data = Comb, model = 'logit', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(economic_abs ~ polity2 + prtyin, data = Comb, model = 'normal.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(as.factor(AMCType) ~ economic_abs, data = Comb, model = 'mlogit', robust = list(method = "weave"), cite = FALSE)
Test <- zelig(as.factor(AMCType) ~ economic_abs + log(GDPperCapita), data = Comb, model = 'mlogit', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(as.factor(AMCType) ~ economic_abs + log(GDPperCapita), data = Comb, model = 'mlogit.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
Test <- zelig(as.factor(AMCType) ~ polity2 + economic_abs + log(GDPperCapita), data = Comb, model = 'mlogit.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
############
# Clean Up Laeven & Valencia (2012) Banking Crisis Data and Merge in Political
# Christopher Gandrud
# Updated 27 January 2014
############
# Load packages
library(DataCombine)
# Load data
LV <- read.csv("/git_repositories/amcData/MainData/CleanedPartial/LvData.csv")
# Basic Clean
LV <- MoveFront(LV, c('imfcode', 'year'))
# Merge with key variables
Others <- read.csv("/git_repositories/amcData/MainData/amcCountryYear.csv")
KeepVars <- c('imfcode', 'year', 'polity2', 'UDS', 'percent1', 'percentl', 'prtyin',
'economic_abs', 'legal_abs', 'GDPperCapita', 'GDPCurrentUSD',
'DomesticCredit', 'TradeOpen', 'ClaimsOnGov', 'CentGovDebt',
'ExternDebtTotalGDP', 'IMF.AMC')
SlimOthers <- Others[, KeepVars]
Comb <- merge(LV, SlimOthers, by = c('imfcode', 'year'), all.x = TRUE)
library(foreign)
write.dta(Comb, "~/Dropbox/AMCProject/LandV_2012_MergedData.dta")
Test <- zelig(as.factor(AMCType) ~ polity2 + economic_abs + log(GDPperCapita) + IMF.MONS, data = Comb, model = 'mlogit.bayes', robust = list(method = "weave"), cite = FALSE)
Test <- zelig(as.factor(AMCType) ~ polity2 + economic_abs + log(GDPperCapita) + IMF.MONA, data = Comb, model = 'mlogit.bayes', robust = list(method = "weave"), cite = FALSE)
Test <- zelig(as.factor(AMCType) ~ polity2 + economic_abs + log(GDPperCapita) + IMF.AMC, data = Comb, model = 'mlogit.bayes', robust = list(method = "weave"), cite = FALSE)
summary(Test)
