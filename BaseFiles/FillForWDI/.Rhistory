EuroDebtSur <- EuroDebtSur[, c(1, 2, 6)]
EuroDebtSur <- plyr::rename(EuroDebtSur, c("TIME" = "year",
"GEO" = "country",
"Value" = "CashSurplusDeficit"))
EuroDebtSur$CashSurplusDeficit[EuroDebtSur$CashSurplusDeficit == ":"] <- NA
EuroDebtSur$CashSurplusDeficit <- as.character(EuroDebtSur$CashSurplusDeficit)
EuroDebtSur$CashSurplusDeficit <- as.numeric(EuroDebtSur$CashSurplusDeficit)
EuroDebtSur$iso2c <- countrycode::countrycode(EuroDebtSur$country,
"country.name", "iso2c")
EuroDebtSur <- subset(EuroDebtSur, iso2c != "RE")
EuroDebtSur <- EuroDebtSur[, c(1, 3, 4)]
FillIn <- function(D1, D2, var1, var2 = NULL, KeyVar = c("iso2c", "year"))
{
# Give var2 the same name as var1 if var2 is NULL
if (is.null(var2)){
var2 <- var1
} else {
var2 <- var2
}
# Give var a generic name
names(D1)[match(var1, names(D1))] <- "VarGen"
names(D2)[match(var2, names(D2))] <- "VarGen.1"
# Convert data frames to data.table type objects
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
# Merge data.tables
OutDT <- D2Temp[D1Temp]
# Fill in missing values from D1 with values from D2
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
# Tell the user what the correlation coefficient is between the variables
SubNoNA <- subset(OutDF, !is.na(VarGen) & !is.na(VarGen.1))
CORR <- cor(OutDF$VarGen, OutDF$VarGen.1, use = "complete.obs")
print(paste("The correlation between", var1, "and", var2, "is", round(CORR, digits = 4)))
# Remove uncombined variable and return main variable's name
names(OutDF)[match("VarGen", names(OutDF))] <- var1
Keepers <- setdiff(names(OutDF), "VarGen.1")
OutDF <- OutDF[, Keepers]
OutDF
}
OutDT <- FillIn(WDIData, EuroDebtSur, var1 = "CashSurplusDeficit")
#############
# Fill in wholes from WDI (gathered with Clean7.R)
# Christopher Gandrud
# 15 February 2013
#############
# Load countrycode
library(countrycode)
# Load data created from Clean7.R
WDIData <- read.csv("/git_repositories/amcData/MainData/CleanedPartial/WDIData.csv")
#### Transform variables as percentage of GDP ####
# Percent GDP creation function
PerGDP <- function(x){
(x/WDIData$GDPCurrentUSD) * 100
}
# Assume IMFCredits variable is complete, i.e. NAs are actually 0
WDIData$IMFCredits[is.na(WDIData$IMFCredits)] <- 0
WDIData$IMFCreditsGDP <- PerGDP(WDIData$IMFCredits)
WDIData$PortfolioEquityGDP <- PerGDP(WDIData$PortfolioEquity)
WDIData$ShortExternDebtAllGDP <- PerGDP(WDIData$ShortExternDebtAll)
WDIData$ExternPrivateDebtGDP <- PerGDP(WDIData$ExternPrivateDebt)
WDIData$ExternPublicDebtGDP <- PerGDP(WDIData$ExternPublicDebt)
WDIData$ExternDebtTotalGDP <- PerGDP(WDIData$ExternDebtTotal)
WDIData$TotalReservesGDP <- PerGDP(WDIData$TotalReserves)
#### Merge with Eurostat Data for Government Debt/Surplus ####
setwd("/git_repositories/amcData/BaseFiles/FillForWDI/")
# Load data
EuroDebtSur <- read.csv("gov_dd_edpt1_1_Data.csv")
# Clean up variable names
EuroDebtSur <- EuroDebtSur[, c(1, 2, 6)]
EuroDebtSur <- plyr::rename(EuroDebtSur, c("TIME" = "year",
"GEO" = "country",
"Value" = "CashSurplusDeficit"))
EuroDebtSur$CashSurplusDeficit[EuroDebtSur$CashSurplusDeficit == ":"] <- NA
EuroDebtSur$CashSurplusDeficit <- as.character(EuroDebtSur$CashSurplusDeficit)
EuroDebtSur$CashSurplusDeficit <- as.numeric(EuroDebtSur$CashSurplusDeficit)
EuroDebtSur$iso2c <- countrycode::countrycode(EuroDebtSur$country,
"country.name", "iso2c")
EuroDebtSur <- subset(EuroDebtSur, iso2c != "RE")
EuroDebtSur <- EuroDebtSur[, c(1, 3, 4)]
FillIn <- function(D1, D2, var1, var2 = NULL, KeyVar = c("iso2c", "year"))
{
# Give var2 the same name as var1 if var2 is NULL
if (is.null(var2)){
var2 <- var1
} else {
var2 <- var2
}
# Give var a generic name
names(D1)[match(var1, names(D1))] <- "VarGen"
names(D2)[match(var2, names(D2))] <- "VarGen.1"
# Convert data frames to data.table type objects
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
# Merge data.tables
OutDT <- D2Temp[D1Temp]
# Fill in missing values from D1 with values from D2
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
# Tell the user what the correlation coefficient is between the variables
SubNoNA <- subset(OutDF, !is.na(VarGen) & !is.na(VarGen.1))
CORR <- cor(OutDF$VarGen, OutDF$VarGen.1, use = "complete.obs")
print(paste("The correlation between", var1, "and", var2, "is", round(CORR, digits = 3)))
# Remove uncombined variable and return main variable's name
names(OutDF)[match("VarGen", names(OutDF))] <- var1
Keepers <- setdiff(names(OutDF), "VarGen.1")
OutDF <- OutDF[, Keepers]
OutDF
}
OutDT <- FillIn(WDIData, EuroDebtSur, var1 = "CashSurplusDeficit")
#############
# Fill in wholes from WDI (gathered with Clean7.R)
# Christopher Gandrud
# 15 February 2013
#############
# Load countrycode
library(countrycode)
# Load FillIn function
devtools::source_gist("4959237")
# Load data created from Clean7.R
WDIData <- read.csv("/git_repositories/amcData/MainData/CleanedPartial/WDIData.csv")
#### Transform variables as percentage of GDP ####
# Percent GDP creation function
PerGDP <- function(x){
(x/WDIData$GDPCurrentUSD) * 100
}
# Assume IMFCredits variable is complete, i.e. NAs are actually 0
WDIData$IMFCredits[is.na(WDIData$IMFCredits)] <- 0
WDIData$IMFCreditsGDP <- PerGDP(WDIData$IMFCredits)
WDIData$PortfolioEquityGDP <- PerGDP(WDIData$PortfolioEquity)
WDIData$ShortExternDebtAllGDP <- PerGDP(WDIData$ShortExternDebtAll)
WDIData$ExternPrivateDebtGDP <- PerGDP(WDIData$ExternPrivateDebt)
WDIData$ExternPublicDebtGDP <- PerGDP(WDIData$ExternPublicDebt)
WDIData$ExternDebtTotalGDP <- PerGDP(WDIData$ExternDebtTotal)
WDIData$TotalReservesGDP <- PerGDP(WDIData$TotalReserves)
#### Merge with Eurostat Data for Government Debt/Surplus ####
setwd("/git_repositories/amcData/BaseFiles/FillForWDI/")
# Load data
EuroDebtSur <- read.csv("gov_dd_edpt1_1_Data.csv")
# Clean up variable names
EuroDebtSur <- EuroDebtSur[, c(1, 2, 6)]
EuroDebtSur <- plyr::rename(EuroDebtSur, c("TIME" = "year",
"GEO" = "country",
"Value" = "CashSurplusDeficit"))
EuroDebtSur$CashSurplusDeficit[EuroDebtSur$CashSurplusDeficit == ":"] <- NA
EuroDebtSur$CashSurplusDeficit <- as.character(EuroDebtSur$CashSurplusDeficit)
EuroDebtSur$CashSurplusDeficit <- as.numeric(EuroDebtSur$CashSurplusDeficit)
EuroDebtSur$iso2c <- countrycode::countrycode(EuroDebtSur$country,
"country.name", "iso2c")
EuroDebtSur <- subset(EuroDebtSur, iso2c != "RE")
EuroDebtSur <- EuroDebtSur[, c(1, 3, 4)]
# Use EuroDebtSur to fill in CashSurplusDeficit
WDIComb <- FillIn(WDIData, EuroDebtSur, var1 = "CashSurplusDeficit")
#############
# Fill in wholes from WDI (gathered with Clean7.R)
# Christopher Gandrud
# 15 February 2013
#############
# Load countrycode
library(countrycode)
# Load FillIn function
devtools::source_gist("4959237")
# Load data created from Clean7.R
WDIData <- read.csv("/git_repositories/amcData/MainData/CleanedPartial/WDIData.csv")
#### Transform variables as percentage of GDP ####
# Percent GDP creation function
PerGDP <- function(x){
(x/WDIData$GDPCurrentUSD) * 100
}
# Assume IMFCredits variable is complete, i.e. NAs are actually 0
WDIData$IMFCredits[is.na(WDIData$IMFCredits)] <- 0
WDIData$IMFCreditsGDP <- PerGDP(WDIData$IMFCredits)
WDIData$PortfolioEquityGDP <- PerGDP(WDIData$PortfolioEquity)
WDIData$ShortExternDebtAllGDP <- PerGDP(WDIData$ShortExternDebtAll)
WDIData$ExternPrivateDebtGDP <- PerGDP(WDIData$ExternPrivateDebt)
WDIData$ExternPublicDebtGDP <- PerGDP(WDIData$ExternPublicDebt)
WDIData$ExternDebtTotalGDP <- PerGDP(WDIData$ExternDebtTotal)
WDIData$TotalReservesGDP <- PerGDP(WDIData$TotalReserves)
#### Merge with Eurostat Data for Government Debt/Surplus ####
setwd("/git_repositories/amcData/BaseFiles/FillForWDI/")
# Load data
EuroDebtSur <- read.csv("gov_dd_edpt1_1_Data.csv")
# Clean up variable names
EuroDebtSur <- EuroDebtSur[, c(1, 2, 6)]
EuroDebtSur <- plyr::rename(EuroDebtSur, c("TIME" = "year",
"GEO" = "country",
"Value" = "CashSurplusDeficit"))
EuroDebtSur$CashSurplusDeficit[EuroDebtSur$CashSurplusDeficit == ":"] <- NA
EuroDebtSur$CashSurplusDeficit <- as.character(EuroDebtSur$CashSurplusDeficit)
EuroDebtSur$CashSurplusDeficit <- as.numeric(EuroDebtSur$CashSurplusDeficit)
EuroDebtSur$iso2c <- countrycode::countrycode(EuroDebtSur$country,
"country.name", "iso2c")
EuroDebtSur <- subset(EuroDebtSur, iso2c != "RE")
EuroDebtSur <- EuroDebtSur[, c(1, 3, 4)]
# Use EuroDebtSur to fill in CashSurplusDeficit
WDIComb <- FillIn(WDIData, EuroDebtSur, Var1 = "CashSurplusDeficit")
fillDf <- data.frame(a = c(1,2,1,2), b = c(3,3,4,4) ,f = c(100,200, 300, 400), g = c(11, 12, 13, 14))
naDf <- data.frame( a = sample(c(1,2), 100, rep=TRUE), b = sample(c(3,4), 100, rep=TRUE), f = sample(c(0,NA), 100, rep=TRUE), g = sample(c(0,NA), 200, rep=TRUE) )
FilledInData <- FillIn(naDF, fillDF, Var1 = f, KeyVar = c("a", "b"))
FilledInData <- FillIn(naDF, fillDF, Var1 = "f", KeyVar = c("a", "b"))
fillDF <- data.frame(a = c(1,2,1,2), b = c(3,3,4,4) ,f = c(100,200, 300, 400), g = c(11, 12, 13, 14))
naDF <- data.frame( a = sample(c(1,2), 100, rep=TRUE), b = sample(c(3,4), 100, rep=TRUE), f = sample(c(0,NA), 100, rep=TRUE), g = sample(c(0,NA), 200, rep=TRUE) )
FilledInData <- FillIn(naDF, fillDF, Var1 = "f", KeyVar = c("a", "b"))
head(FilledInData)
FillIn <- function(D1, D2, Var1, Var2 = NULL, KeyVar = c("iso2c", "year"))
{
# Give Var2 the same name as var1 if Var2 is NULL
if (is.null(Var2)){
Var2 <- Var1
} else {
Var2 <- Var2
}
# Give var a generic name
names(D1)[match(Var1, names(D1))] <- "VarGen"
names(D2)[match(Var2, names(D2))] <- "VarGen.1"
# Convert data frames to data.table type objects
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
# Merge data.tables
OutDT <- D2Temp[D1Temp]
# Fill in missing values from D1 with values from D2
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
# Tell the user how many values were filled in
SubNA <- subset(OutDF, is.na(VarGen) & !is.na(VarGen.1))
# Tell the user what the correlation coefficient is between the variables
SubNoNA <- subset(OutDF, !is.na(VarGen) & !is.na(VarGen.1))
CORR <- cor(OutDF$VarGen, OutDF$VarGen.1, use = "complete.obs")
print(paste("The correlation between", Var1, "and", Var2, "is", round(CORR, digits = 3)))
# Remove uncombined variable and return main variable's name
names(OutDF)[match("VarGen", names(OutDF))] <- Var1
Keepers <- setdiff(names(OutDF), "VarGen.1")
OutDF <- OutDF[, Keepers]
OutDF
}
naDF <- data.frame( a = sample(c(1,2), 100, rep=TRUE),
b = sample(c(3,4), 100, rep=TRUE),
fNA = sample(c(0,NA), 100, rep=TRUE))
fillDF <- data.frame(a = c(1,2,1,2),
b = c(3,3,4,4),
fFull = c(100,200, 300, 400)))
fillDF <- data.frame(a = c(1,2,1,2),
b = c(3,3,4,4),
fFull = c(100,200, 300, 400))
FilledInData <- FillIn(naDF, fillDF, Var1 = "fNA", Var2 = "fFull KeyVar = c("a", "b"))
FilledInData <- FillIn(naDF, fillDF, Var1 = "fNA", Var2 = "fFull, KeyVar = c("a", "b"))
FilledInData <- FillIn(naDF, fillDF, Var1 = "fNA", Var2 = "fFull", KeyVar = c("a", "b"))
FillIn <- function(D1, D2, Var1, Var2 = NULL, KeyVar = c("iso2c", "year"))
{
# Give Var2 the same name as var1 if Var2 is NULL
if (is.null(Var2)){
Var2 <- Var1
} else {
Var2 <- Var2
}
# Give var a generic name
names(D1)[match(Var1, names(D1))] <- "VarGen"
names(D2)[match(Var2, names(D2))] <- "VarGen.1"
# Convert data frames to data.table type objects
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
# Merge data.tables
OutDT <- D2Temp[D1Temp]
# Fill in missing values from D1 with values from D2
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
# Tell the user how many values were filled in
SubNA <- subset(OutDF, is.na(VarGen) & !is.na(VarGen.1))
print(paste(length(SubNA), "NAs where replaced in", D1))
# Tell the user what the correlation coefficient is between the variables
SubNoNA <- subset(OutDF, !is.na(VarGen) & !is.na(VarGen.1))
CORR <- cor(OutDF$VarGen, OutDF$VarGen.1, use = "complete.obs")
print(paste("The correlation between", Var1, "and", Var2, "is", round(CORR, digits = 3)))
# Remove uncombined variable and return main variable's name
names(OutDF)[match("VarGen", names(OutDF))] <- Var1
Keepers <- setdiff(names(OutDF), "VarGen.1")
OutDF <- OutDF[, Keepers]
OutDF
}
FilledInData <- FillIn(naDF, fillDF, Var1 = "fNA", Var2 = "fFull", KeyVar = c("a", "b"))
naDF <- data.frame( a = sample(c(1,2), 100, rep=TRUE),
b = sample(c(3,4), 100, rep=TRUE),
fNA = sample(c(100, 200, 300,NA), 100, rep=TRUE))
FilledInData <- FillIn(naDF, fillDF, Var1 = "fNA", Var2 = "fFull", KeyVar = c("a", "b"))
FillIn <- function(D1, D2, Var1, Var2 = NULL, KeyVar = c("iso2c", "year"))
{
# Give Var2 the same name as var1 if Var2 is NULL
if (is.null(Var2)){
Var2 <- Var1
} else {
Var2 <- Var2
}
# Give var a generic name
names(D1)[match(Var1, names(D1))] <- "VarGen"
names(D2)[match(Var2, names(D2))] <- "VarGen.1"
# Convert data frames to data.table type objects
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
# Merge data.tables
OutDT <- D2Temp[D1Temp]
# Fill in missing values from D1 with values from D2
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
# Tell the user how many values were filled in
SubNA <- subset(OutDF, is.na(VarGen) & !is.na(VarGen.1))
print(paste(nrow(SubNA), "NAs where replaced in."))
# Tell the user what the correlation coefficient is between the variables
SubNoNA <- subset(OutDF, !is.na(VarGen) & !is.na(VarGen.1))
CORR <- cor(OutDF$VarGen, OutDF$VarGen.1, use = "complete.obs")
print(paste("The correlation between", Var1, "and", Var2, "is", round(CORR, digits = 3)).)
# Remove uncombined variable and return main variable's name
names(OutDF)[match("VarGen", names(OutDF))] <- Var1
Keepers <- setdiff(names(OutDF), "VarGen.1")
OutDF <- OutDF[, Keepers]
OutDF
}
FillIn <- function(D1, D2, Var1, Var2 = NULL, KeyVar = c("iso2c", "year"))
{
# Give Var2 the same name as var1 if Var2 is NULL
if (is.null(Var2)){
Var2 <- Var1
} else {
Var2 <- Var2
}
# Give var a generic name
names(D1)[match(Var1, names(D1))] <- "VarGen"
names(D2)[match(Var2, names(D2))] <- "VarGen.1"
# Convert data frames to data.table type objects
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
# Merge data.tables
OutDT <- D2Temp[D1Temp]
# Fill in missing values from D1 with values from D2
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
# Tell the user how many values were filled in
SubNA <- subset(OutDF, is.na(VarGen) & !is.na(VarGen.1))
print(paste(nrow(SubNA), "NAs where replaced in."))
# Tell the user what the correlation coefficient is between the variables
SubNoNA <- subset(OutDF, !is.na(VarGen) & !is.na(VarGen.1))
CORR <- cor(OutDF$VarGen, OutDF$VarGen.1, use = "complete.obs")
print(paste("The correlation between", Var1, "and", Var2, "is", round(CORR, digits = 3).))
# Remove uncombined variable and return main variable's name
names(OutDF)[match("VarGen", names(OutDF))] <- Var1
Keepers <- setdiff(names(OutDF), "VarGen.1")
OutDF <- OutDF[, Keepers]
OutDF
}
FillIn <- function(D1, D2, Var1, Var2 = NULL, KeyVar = c("iso2c", "year"))
{
# Give Var2 the same name as var1 if Var2 is NULL
if (is.null(Var2)){
Var2 <- Var1
} else {
Var2 <- Var2
}
# Give var a generic name
names(D1)[match(Var1, names(D1))] <- "VarGen"
names(D2)[match(Var2, names(D2))] <- "VarGen.1"
# Convert data frames to data.table type objects
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
# Merge data.tables
OutDT <- D2Temp[D1Temp]
# Fill in missing values from D1 with values from D2
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
# Tell the user how many values were filled in
SubNA <- subset(OutDF, is.na(VarGen) & !is.na(VarGen.1))
print(paste(nrow(SubNA), "NAs where replaced in."))
# Tell the user what the correlation coefficient is between the variables
SubNoNA <- subset(OutDF, !is.na(VarGen) & !is.na(VarGen.1))
CORR <- cor(OutDF$VarGen, OutDF$VarGen.1, use = "complete.obs")
print(paste("The correlation between", Var1, "and", Var2, "is", round(CORR, digits = 3), "."))
# Remove uncombined variable and return main variable's name
names(OutDF)[match("VarGen", names(OutDF))] <- Var1
Keepers <- setdiff(names(OutDF), "VarGen.1")
OutDF <- OutDF[, Keepers]
OutDF
}
FilledInData <- FillIn(naDF, fillDF, Var1 = "fNA", Var2 = "fFull", KeyVar = c("a", "b"))
FillIn <- function(D1, D2, Var1, Var2 = NULL, KeyVar = c("iso2c", "year"))
{
# Give Var2 the same name as var1 if Var2 is NULL
if (is.null(Var2)){
Var2 <- Var1
} else {
Var2 <- Var2
}
# Give var a generic name
names(D1)[match(Var1, names(D1))] <- "VarGen"
names(D2)[match(Var2, names(D2))] <- "VarGen.1"
# Convert data frames to data.table type objects
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
# Merge data.tables
OutDT <- D2Temp[D1Temp]
# Fill in missing values from D1 with values from D2
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
# Tell the user how many values were filled in
SubNA <- subset(OutDF, is.na(VarGen) & !is.na(VarGen.1))
SubNA
}
FilledInData <- FillIn(naDF, fillDF, Var1 = "fNA", Var2 = "fFull", KeyVar = c("a", "b"))
rstudio::viewData(FilledInData)
?data.table
library(data.table)
help("data.table")
FillIn <- function(D1, D2, Var1, Var2 = NULL, KeyVar = c("iso2c", "year"))
{
# Give Var2 the same name as var1 if Var2 is NULL
if (is.null(Var2)){
Var2 <- Var1
} else {
Var2 <- Var2
}
# Give var a generic name
names(D1)[match(Var1, names(D1))] <- "VarGen"
names(D2)[match(Var2, names(D2))] <- "VarGen.1"
# Convert data frames to data.table type objects
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
# Merge data.tables
OutDT <- D2Temp[D1Temp]
# Tell the user how many values will be filled in
SubNA <- OutDT[, list(VarGen, VarGen1)]
SubNA <- subset(SubNA, is.na(VarGen) & !is.na(VarGen.1))
print(paste(nrow(SubNA), "NAs will be replaced."))
# Fill in missing values from D1 with values from D2
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
# Tell the user what the correlation coefficient is between the variables
SubNoNA <- subset(OutDF, !is.na(VarGen) & !is.na(VarGen.1))
CORR <- cor(OutDF$VarGen, OutDF$VarGen.1, use = "complete.obs")
print(paste("The correlation between", Var1, "and", Var2, "is", round(CORR, digits = 3)))
# Remove uncombined variable and return main variable's name
names(OutDF)[match("VarGen", names(OutDF))] <- Var1
Keepers <- setdiff(names(OutDF), "VarGen.1")
OutDF <- OutDF[, Keepers]
OutDF
}
FilledInData <- FillIn(naDF, fillDF, Var1 = "fNA", Var2 = "fFull", KeyVar = c("a", "b"))
#' An R function for filling in missing values of a variable from one data frame with the values from another variable.
#'
#' \code{FillIn} uses values of a variable from one data set to fill in missing values in another.
#'
#' @param D1 the data frame with the variable you would like to fill in.
#' @param D2 the data frame with the variable you would like to use to fill in \code{D1}.
#' @param Var1 a character string of the name of the variable in \code{D1} you want to fill in.
#' @param Var2 an optional character string of variable name in \code{D2} that you would like to use to fill in.
#' @param KeyVar a character vector of variable names that are shared by \code{D1} and \code{D2} that can be used to join the data frames.
#'
#' @examples
#' # Create data set with missing values
#' naDF <- data.frame(a = sample(c(1,2), 100, rep=TRUE),
#'                    b = sample(c(3,4), 100, rep=TRUE),
#'                    fNA = sample(c(100, 200, 300,NA), 100, rep=TRUE))
#'
#' # Created full data set
#' fillDF <- data.frame(a = c(1,2,1,2),
#'                      b = c(3,3,4,4),
#'                      fFull = c(100, 200, 300))
#'
#' # Fill in missing f's from naDF with values from fillDF
#' FilledInData <- FillIn(naDF, fillDF, Var1 = "fNA", Var2 = "fFull", KeyVar = c("a", "b"))
#'
FillIn <- function(D1, D2, Var1, Var2 = NULL, KeyVar = c("iso2c", "year"))
{
# Give Var2 the same name as var1 if Var2 is NULL
if (is.null(Var2)){
Var2 <- Var1
} else {
Var2 <- Var2
}
# Give var a generic name
names(D1)[match(Var1, names(D1))] <- "VarGen"
names(D2)[match(Var2, names(D2))] <- "VarGen.1"
# Convert data frames to data.table type objects
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
# Merge data.tables
OutDT <- D2Temp[D1Temp]
# Tell the user how many values will be filled in
SubNA <- OutDT[, list(VarGen, VarGen.1)]
SubNA <- subset(SubNA, is.na(VarGen) & !is.na(VarGen.1))
print(paste(nrow(SubNA), "NAs will be replaced."))
# Fill in missing values from D1 with values from D2
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
# Tell the user what the correlation coefficient is between the variables
SubNoNA <- subset(OutDF, !is.na(VarGen) & !is.na(VarGen.1))
CORR <- cor(OutDF$VarGen, OutDF$VarGen.1, use = "complete.obs")
print(paste("The correlation between", Var1, "and", Var2, "is", round(CORR, digits = 3)))
# Remove uncombined variable and return main variable's name
names(OutDF)[match("VarGen", names(OutDF))] <- Var1
Keepers <- setdiff(names(OutDF), "VarGen.1")
OutDF <- OutDF[, Keepers]
OutDF
}
FilledInData <- FillIn(naDF, fillDF, Var1 = "fNA", Var2 = "fFull", KeyVar = c("a", "b"))
rstudio::viewData(naDF)
