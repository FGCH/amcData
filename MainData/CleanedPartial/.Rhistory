geom_line(aes(color = AMCType), size = 2, alpha = I(0.9)) +
scale_color_manual(values = TypeColors, name="") +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
?require
librar(devtools)
library(devtools)
DATA <- read.csv("~/Desktop/DATA.csv")
viewData(DATA)
library(ggplot2)
names(DATA)
ggplot(DATA, aes(x = Long.term.unemployment, y = Suicide.rates)) + geom_point()
rstudio::viewData(DATA)
log(200/1000)
log(.1)
DATA <- read.csv("~/Downloads/DATA.csv")
short <- DATA[, c("Suicide.rates","Long.term.unemployment","Public.social.expenditure","GDP.per.capita","Real.GDP.growth")]
pairs(short)
DATA2<-subset(DATA, country!= "Korea")
DATA2<-subset(DATA, Country!= "Korea")
KS1<-lm(Suicide.rates~Long.term.unemployment, data=DATA2)
summary(KS1)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="year",                     options=list(width=700, height=600))
library(googleVis)
rstudio::viewData(DATA)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
rstudio::viewData(DATA)
DATA <- !duplicated(DATA)
rstudio::viewData(DATA2)
?duplicated
DATA <- read.csv("~/Downloads/DATA.csv")
DATA <- subset(DATA, !is.na(Year))
rstudio::viewData(DATA)
short <- DATA[, c("Suicide.rates","Long.term.unemployment","Public.social.expenditure","GDP.per.capita","Real.GDP.growth")]
library(googleVis)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
print(DATA.motion, "chart")
DATA.motion <- gvisMotionChart(Short, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
DATA.motion <- gvisMotionChart(short, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
rstudio::viewData(DATA)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
Data.motion
DATA.motion
print(DATA.motion)
plot(DATA.motion)
?print
height = 450))
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 550,
height = 450))
plot(M)
?print
?save
Z <- 1:100
J <- 1:50
save(c(Z, J), file = "~/Desktop/Test.RData")
save(Z, J, file = "~/Desktop/Test.RData")
load("~/Desktop/Test.RData")
rm(J, Z)
load("~/Desktop/Test.RData")
library(devtools)
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
# Number Operating
SumOp <- subset(NotNaAMCType, AMCType !=  "?")
SumOp <- subset(SumOp, AMCType !=  "None")
#SumOpAll <- ddply(SumOp, .(year), function(x) sum(x$NumAMCOpNoNA))
#OperatingAllPlot <- ggplot(data = SumOpAll, aes(year, V1)) +
#  geom_vline(xintercept = c(1991, 1997, 2008), size = 0.5, color = "#DEDEDE") +
#  geom_line(size = 2, alpha = I(0.9)) +
#  scale_x_continuous(limits = c(1980, 2011)) +
#  xlab("") + ylab("Number of AMCs Operating\n") +
#  theme_bw(base_size = 15)
# Number operating by type
SumOp$Marker[SumOp$NumAMCOpNoNA >= 1] <- 1
SumOp <- ddply(SumOp, .(year, AMCType), function(x) sum(x$Marker))
OperatingTypePlot <- ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), size = 0.5, color = "#DEDEDE") +
geom_line(aes(color = AMCType, linetype = AMCType), size = 1, alpha = I(0.9)) +
scale_color_discrete(name = "") +
scale_linetype_discrete(name = "") +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number of Countries\n") +
theme_bw(base_size = 15)
print(OperatingTypePlot)
#grid.arrange(OperatingAllPlot, OperatingTypePlot, ncol = 2)
library(devtools)
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
install.packages("crrSC")
library(crrSC)
data(cdata)
rstudio::viewData(cdata)
rstudio::viewData(AMC)
rstudio::viewData(AMCLag)
AMCLag$AMCStatus <- 1
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
rstudio::viewData(AMCLag)
rstudio::viewData(AMC)
library(msm)
?statetable.msm
names(AMCLag)
StateTable <- statetable.msm(state = AMCStatus, subject = ISOCode, data = AMCLag)
StateTable
39/15
15/39
5/15
StateTable <- unname(StateTable)
rownames(StateTable) <- c("No AMC", "Centralised", "Decentralised")
colnames(StateTable) <- c("No AMC", "Centralised", "Decentralised")
fix(StateTable)
StateTable <- data.frame(StateTable)
rstudio::viewData(StateTable)
StateTableDF <- data.frame(StateTable)
fin.heatmap <- ggplot(StateTableDF, aes(Var2, Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = Freq)) +
scale_fill_gradient2(low = "white", high = "red", name = "") +
xlab("\nAfter") + ylab("Before\n") +
theme_bw()
fin.heatmap
StateTableDF <- subset(StateTableDF, Var1 != Var2)
### Create heatmap
StateTablePlot <- ggplot(StateTableDF, aes(Var2, Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = Freq)) +
scale_fill_gradient2(low = "white", high = "red", name = "") +
xlab("\nAfter") + ylab("Before\n") +
theme_bw()
StateTableDF <- subset(StateTableDF, Var1 != Var2)
rstudio::viewData(StateTableDF)
### Create heatmap
StateTablePlot <- ggplot(StateTableDF, aes(Var2, Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = Freq)) +
scale_fill_gradient2(low = "white", high = "red", name = "") +
xlab("\nAfter") + ylab("Before\n") +
theme_bw()
print(StateTablePlot)
rstudio::viewData(AMCLag)
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
cluster = AMCLag$country)
summary(M1)
print(M1)
M1$coef
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 2
cluster = AMCLag$country)
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 2,
cluster = AMCLag$country)
M1$coef
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 3,
cluster = AMCLag$country)
M1$coef
plot(M1)
?with
with(AMCLag, {
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 3,
cluster = AMCLag$country)
})
M1$coef
with(AMCLag, {
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
cluster = country)
})
M1$coef
fix(`M1`)
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
})
M1$coef
rm(M1)
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
})
M1$coef
M1$coef
M1$coef
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
detach(AMCLag)
M1$coef
plot.cuminc(M1)
library(cmprsk)
install.packages(cmprsk)
install.packages("cmprsk")
library(cmprsk)
plot.cuminc(M1)
M1Predict <- predict(M1, c(-5, 0, 5, 10))
rstudio::viewData(AMCLag)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = c(UDS, SystemicCrisisLag3),
failcode = 3,
strata = country)
detach(AMCLag)
?crrs
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
strata = country)
detach(AMCLag)
M1$coef
M1Predict <- predict(M1, c(-5, 0, 5, 10))
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
M1$coef
M1Predict <- predict(M1, c(-5, 0, 5, 10))
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
M1$coef
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
M1$coef
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
M1$coef
fix(`M1`)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
rm(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
summary(M1)
rm(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
ctype = 2
cluster = country)
attach(AMCLag)
attach(AMCLag)
detach(AMCLag)
attach(AMCLag)
detach(AMCLag)
detach(AMCLag)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
ctype = 2,
strata = country)
detach(AMCLag)
M1$coef
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
library(crrSC)
library(cmprsk)
library(devtools)
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
AMCLag$AMCStatus <- 1
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
# Stratified competing risks model
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
ctype = 2,
strata = country)
detach(AMCLag)
M1$coef
print(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 3,
ctype = 2,
strata = country)
detach(AMCLag)
M1$coef
print(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 3,
ctype = 1,
strata = country)
detach(AMCLag)
M1$coef
print(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 3,
ctype = 2,
strata = country)
detach(AMCLag)
print(M1)
fix(`M1`)
Test <- print(M1)
fix(Test)
print.crrs
?diag
diag(M1$var)
M1$var
?signif
?invisible
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 3,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
predict.crr
library(cmprsk)
predict.crr
predict.crr
?print.crr
crr
predict.crr
predict
crr.predict
M1$bfitj
rstudio::viewData(AMCLag)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execric, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
names(AMCLag)
detach(AMCLag)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
# Number Operating
SumOp <- subset(NotNaAMCType, AMCType !=  "?")
SumOp <- subset(SumOp, AMCType !=  "None")
#SumOpAll <- ddply(SumOp, .(year), function(x) sum(x$NumAMCOpNoNA))
#OperatingAllPlot <- ggplot(data = SumOpAll, aes(year, V1)) +
#  geom_vline(xintercept = c(1991, 1997, 2008), size = 0.5, color = "#DEDEDE") +
#  geom_line(size = 2, alpha = I(0.9)) +
#  scale_x_continuous(limits = c(1980, 2011)) +
#  xlab("") + ylab("Number of AMCs Operating\n") +
#  theme_bw(base_size = 15)
# Number operating by type
SumOp$Marker[SumOp$NumAMCOpNoNA >= 1] <- 1
SumOp <- ddply(SumOp, .(year, AMCType), function(x) sum(x$Marker))
OperatingTypePlot <- ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), size = 0.5, color = "#DEDEDE") +
geom_line(aes(color = AMCType, linetype = AMCType), size = 1, alpha = I(0.9)) +
scale_color_discrete(name = "") +
scale_linetype_discrete(name = "") +
scale_x_continuous(limits = c(1980, 2012)) +
xlab("") + ylab("Number of Countries\n") +
theme_bw(base_size = 15)
print(OperatingTypePlot)
#########
# Make amcData Data Set
# Christopher Gandrud
# Updated 7 November 2012
#########
# Install required packages
## Code based on https://gist.github.com/3710171
## See also http://bit.ly/PbabKd
doInstall <- FALSE  # Change to FALSE if you don't want packages installed.
toInstall <- c("WDI", "countrycode", "devtools", "reshape", "gdata", "xtable")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
# Run clean up files
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddAMCFull.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddLVFullCrisisYears.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddLV.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddDPIVariables.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddUDSVariable.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddWorldBank.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddDreherIMF.R")
# Create merged data set
## Country-Year data
setwd("/git_repositories/amcData/SourceCode/DataCreation/Merge/")
source("MergeSurvival.R")
# Tidy workspace
rm(list = setdiff(ls(), "amcCountryYear"))
15/40
