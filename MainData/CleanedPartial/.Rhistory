absolute.colors <- c("Forecast" = "#B35B40", "Actual" = "#000000")
### Create line graph
absInflation <- qplot(Quarter, value, geom = "line", data = cpi.abs, color = variable, linetype = variable) +
xlab("") + ylab("Inflation") +
scale_color_manual(values = absolute.colors, name = "") +
scale_linetype(name = "") +
geom_vline(aes(xintercept = 1996), linetype = "dotted", colour = "grey50") +
annotate("text", x = 2001, y = 8.5, label = "FRB/Global", colour = "grey50") +
geom_vline(aes(xintercept = 1975), linetype = "dotted", colour = "grey50") +
annotate("text", x = 1978, y = 1.5, label = "SEM", colour = "grey50") +
theme_bw() +
opts(axis.title.x = theme_text(size = 12, vjust = 0))
print(absInflation)
# Clean up data and create forecast error variable
cpi.data$pres_party_name <- factor(cpi.data$pres_party, label = c("Rep", "Dem"))
cpi.data$error.prop.deflator.q2 <-  (cpi.data$GB_CPI_QTR2 - cpi.data$deflator)/cpi.data$deflator
# Create FRB/Global Model Variable
cpi.data$GlobalModel[cpi.data$Quarter > 1995.4] <- "1"
cpi.data$GlobalModel[cpi.data$Quarter < 1996.1] <- "0"
cpi.data$GlobalModel <- factor(cpi.data$GlobalModel, labels = c("Before 1996", "After 1996"))
# Create Fed Chair variable
cpi.data$Chair[cpi.data$Quarter > 1987.3] <-  "Greenspan"
cpi.data$Chair[cpi.data$Quarter <= 1987.3] <- "Volcker"
cpi.data$Chair[cpi.data$Quarter <= 1979.3] <- "Miller"
cpi.data$Chair[cpi.data$Quarter <= 1978.1] <- "Burns"
cpi.data$Chair[cpi.data$Quarter <= 1970.1] <- "Martin"
cpi.data$Chair <- factor(cpi.data$Chair)
## Remove 2 quarters from Johnson presidency
cpi.data <- subset(cpi.data, president != "Johnson")
cpi.data$president <- as.factor(cpi.data$presTerm)
## Create graph
# Error region +/- 10 percent
rect.time <- data.frame(xmin = 1968, xmax = 2006, ymin = -0.1, ymax = 0.1)
# Partisan colours
partisan.colors = c("Rep" = "#C42B00", "Dem" = "#2259B3")
errors.time <- ggplot(cpi.data, aes(x = Quarter, y = error.prop.deflator.q2)) +
geom_point(aes(color = pres_party_name)) +
stat_smooth(method = "lm", aes(group = presTerm, color = pres_party_name, fill = pres_party_name)) +
geom_rect(data = rect.time, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), color = "grey20", alpha = 0.5, inherit.aes = FALSE) +
scale_color_manual(values = partisan.colors, name = "") +
scale_fill_manual(values = partisan.colors, name = "") +
xlab("") + ylab("Standardized Forecast Error") +
scale_x_continuous(limits=c(1968, 2006)) +
theme_bw() +
opts(axis.title.x = theme_text(size = 12, vjust = 0)) +
opts(axis.title.y = theme_text(angle = 90, size = 12, vjust = 0.3))
print(errors.time)
library(MatchIt)
library(Zelig)
library(stats)
# Subset for complete (nonmissing) values
# matchit requires data sets to have no missing values
vars <- c("Quarter", "ElectionPeriod", "pres_party", "error.prop.deflator.q2", "time_to_election",
"recession", "senate_dem_rep", "house_dem_rep", "DebtGDP", "ExpenditureGDP",
"PotentialGDP", "GlobalModel", "FedFunds", "FedFunds2qChange", "DiscountRate",
"DiscountRate2qChange", "Chair"
)
cpi.complete <- cpi.data[complete.cases(cpi.data[vars]),]
cpi.complete <- cpi.complete[vars]
#### Matching Model ####
# Elections
cpi.matched.election <- matchit(ElectionPeriod ~ recession + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel + DiscountRate2qChange, data = cpi.complete, method = "genetic", pop.size = 161)
# Party
cpi.matched.party <- matchit(pres_party ~ recession + time_to_election + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel + DiscountRate2qChange, data = cpi.complete, method = "genetic", pop.size = 161)
# Diagnostics for Covariate Balance
# summary(cpi.matched.election)
# plot(cpi.matched.election)
# summary(cpi.matched.party)
# plot(cpi.matched.party)
# Turn matched data into data.frame for analysis
cpi.Mdf.election <- match.data(cpi.matched.election)
cpi.Mdf.party <- match.data(cpi.matched.party)
NL5 <- zelig(error.prop.deflator.q2 ~ pres_party*ElectionPeriod + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
summary(NL5)
################
# Comparative Expected Values of Inflation Error with Democratic and Republican Presidents
# using results from matched data where pres_party is the treatment variable and normal.bayes is the parametric model (PB1 from MainAnalysis2.R)
# Christopher Gandrud
# Updated 31 July 2012
################
# requires Zelig, reshape2, ggplot2
# Ranges of fitted values
pres_party.r <- c(0, 1)
# Set fitted values, all variables other than pres_party set to their means
ModelParty <- setx(PB1, pres_party = pres_party.r)
# Simulate quantities of interest
ModelParty.sim <- sim(PB1, x = ModelParty)
# Extract expected values from simulations
ModelParty.ev <- ModelParty.sim$qi
ModelParty.ev <-data.frame(ModelParty.ev$ev)
names(ModelParty.ev) <- c("Rep", "Dem")
ModelParty.ev <- melt(ModelParty.ev, measure = 1:2)
ModelParty.ev$variable <- factor(ModelParty.ev$variable)
# Plot
PartyBreak <- c("Rep", "Dem")
NamePartyBreak <- c("Republican President", "Democratic President")
ModelPartyPlot <- ggplot(data = ModelParty.ev, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = 1), colour = "grey70") +
geom_point(shape = 21, aes(color = variable), alpha = I(0.05), size = 7) +
scale_color_manual(values = partisan.colors, guide = FALSE) + # partisan.colors defined in the main .Rnw file
scale_x_discrete(breaks = PartyBreak, labels = NamePartyBreak) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
theme_bw(base_size = 11)
print(ModelPartyPlot)
###############
# Main Analyses for GreenBook Forecast Error Paper
# Christopher Gandrud
# 27 July 2012
###############
library(MatchIt)
library(Zelig)
library(stats)
# Subset for complete (nonmissing) values
# matchit requires data sets to have no missing values
vars <- c("Quarter", "ElectionPeriod", "pres_party", "error.prop.deflator.q2", "time_to_election",
"recession", "senate_dem_rep", "house_dem_rep", "DebtGDP", "ExpenditureGDP",
"PotentialGDP", "GlobalModel", "FedFunds", "FedFunds2qChange", "DiscountRate",
"DiscountRate2qChange", "Chair"
)
cpi.complete <- cpi.data[complete.cases(cpi.data[vars]),]
cpi.complete <- cpi.complete[vars]
#### Matching Model ####
# Elections
cpi.matched.election <- matchit(ElectionPeriod ~ recession + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel + DiscountRate2qChange, data = cpi.complete, method = "genetic", pop.size = 161)
# Party
cpi.matched.party <- matchit(pres_party ~ recession + time_to_election + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel + DiscountRate2qChange, data = cpi.complete, method = "genetic", pop.size = 161)
# Diagnostics for Covariate Balance
# summary(cpi.matched.election)
# plot(cpi.matched.election)
# summary(cpi.matched.party)
# plot(cpi.matched.party)
# Turn matched data into data.frame for analysis
cpi.Mdf.election <- match.data(cpi.matched.election)
cpi.Mdf.party <- match.data(cpi.matched.party)
################### Parametric Models ################
###### Non-matched (N) ######
# Least Squares
NL1 <- zelig(error.prop.deflator.q2 ~ recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
NL2 <- zelig(error.prop.deflator.q2 ~ time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
NL3 <- zelig(error.prop.deflator.q2 ~ ElectionPeriod + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
NL4 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
NL5 <- zelig(error.prop.deflator.q2 ~ pres_party*ElectionPeriod + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
NL6 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
NL7 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
NL8 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.data, cite = FALSE)
NL9 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + DebtGDP + time_to_election + Chair + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
NL10 <- zelig(error.prop.deflator.q2 ~ pres_party*house_dem_rep + recession + DebtGDP + time_to_election + senate_dem_rep + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
NL11 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep + house_dem_rep + recession + DebtGDP + time_to_election + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
NL12 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep + recession + DebtGDP + time_to_election + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data, cite = FALSE)
NL13 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep, model = "ls", data = cpi.data, cite = FALSE)
###### Matched based with the ElectionPeriod as the treatment variable (E) ######
# Least Squares
EL1 <- zelig(error.prop.deflator.q2 ~ DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.election, cite = FALSE)
EL2 <- zelig(error.prop.deflator.q2 ~ time_to_election + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.election, cite = FALSE)
EL3 <- zelig(error.prop.deflator.q2 ~ ElectionPeriod + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.election, cite = FALSE)
EL4 <- zelig(error.prop.deflator.q2 ~ pres_party + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.election, cite = FALSE)
EL5 <- zelig(error.prop.deflator.q2 ~ pres_party*ElectionPeriod + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.election, cite = FALSE)
EL6 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.election, cite = FALSE)
EL7 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.election, cite = FALSE)
EL8 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.Mdf.election, cite = FALSE)
EL9 <- zelig(error.prop.deflator.q2 ~ pres_party*house_dem_rep + time_to_election + senate_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.election, cite = FALSE)
EL10 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep + house_dem_rep + time_to_election + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.election, cite = FALSE)
EL11 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep + DebtGDP + time_to_election + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.election, cite = FALSE)
EL12 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep, model = "ls", data = cpi.Mdf.election, cite = FALSE)
###### Matched based with the pres_party as the treatment variable (P) ######
# Least Squares
PL1 <- zelig(error.prop.deflator.q2 ~ recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL2 <- zelig(error.prop.deflator.q2 ~ time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL3 <- zelig(error.prop.deflator.q2 ~ ElectionPeriod + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL4 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL5 <- zelig(error.prop.deflator.q2 ~ pres_party*ElectionPeriod + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL6 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL7 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL8 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL9 <- zelig(error.prop.deflator.q2 ~ pres_party*house_dem_rep + recession + DebtGDP + time_to_election + senate_dem_rep + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL10 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep + house_dem_rep + recession + DebtGDP + time_to_election + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL11 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep + recession + DebtGDP + time_to_election + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL12 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep, model = "ls", data = cpi.Mdf.party, cite = FALSE)
##### Normal Bayes, Not Matched (NB) #####
NB1 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + time_to_election + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "normal.bayes", data = cpi.data, cite = FALSE)
#### Normal Bayes, Matched (MP) ####
PB1 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + time_to_election + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "normal.bayes", data = cpi.Mdf.party, cite = FALSE)
################
# Comparative Expected Values of Inflation Error with Democratic and Republican Presidents
# using results from matched data where pres_party is the treatment variable and normal.bayes is the parametric model (PB1 from MainAnalysis2.R)
# Christopher Gandrud
# Updated 31 July 2012
################
# requires Zelig, reshape2, ggplot2
# Ranges of fitted values
pres_party.r <- c(0, 1)
# Set fitted values, all variables other than pres_party set to their means
ModelParty <- setx(PB1, pres_party = pres_party.r)
# Simulate quantities of interest
ModelParty.sim <- sim(PB1, x = ModelParty)
# Extract expected values from simulations
ModelParty.ev <- ModelParty.sim$qi
ModelParty.ev <-data.frame(ModelParty.ev$ev)
names(ModelParty.ev) <- c("Rep", "Dem")
ModelParty.ev <- melt(ModelParty.ev, measure = 1:2)
ModelParty.ev$variable <- factor(ModelParty.ev$variable)
# Plot
PartyBreak <- c("Rep", "Dem")
NamePartyBreak <- c("Republican President", "Democratic President")
ModelPartyPlot <- ggplot(data = ModelParty.ev, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = 1), colour = "grey70") +
geom_point(shape = 21, aes(color = variable), alpha = I(0.05), size = 7) +
scale_color_manual(values = partisan.colors, guide = FALSE) + # partisan.colors defined in the main .Rnw file
scale_x_discrete(breaks = PartyBreak, labels = NamePartyBreak) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
theme_bw(base_size = 11)
print(ModelPartyPlot)
################
# President*Congress Interaction Graphs
# Christopher Gandrud
# Updated 31 July 2012
################
# Create range of values to simulate expected values across
pres_party.r <- c(0, 1)
house_dem_rep.r <- seq(0.87, 2.04, by = .01)
# Set fitted values
PL11SetDem <- setx(PL11, pres_party = pres_party.r, house_dem_rep = 1.2, senate_dem_rep = 1.2)
PL11SetRep <- setx(PL11, pres_party = pres_party.r, house_dem_rep = 0.8, senate_dem_rep = 0.8)
# Simulate expected values.
PL11SimDem <- sim(PL11, x = PL11SetDem)
PL11SimRep <- sim(PL11, x = PL11SetRep)
# Extract expected values from simulations (Dem)
PL11SimDem.ev <- PL11SimDem$qi
PL11SimDem.ev <-data.frame(PL11SimDem.ev$ev)
names(PL11SimDem.ev) <- c("Republican President", "Democratic President")
PL11SimDem.ev <- melt(PL11SimDem.ev, measure = 1:2)
# Extract expected values from simulations (Rep)
PL11SimRep.ev <- PL11SimRep$qi
PL11SimRep.ev <-data.frame(PL11SimRep.ev$ev)
names(PL11SimRep.ev) <- c("Republican President", "Democratic President")
PL11SimRep.ev <- melt(PL11SimRep.ev, measure = 1:2)
# Final clean up
PL11SimDem.ev$variable <- factor(PL11SimDem.ev$variable)
PL11SimDem.ev$Congress <- "Dem. Congress"
PL11SimRep.ev$variable <- factor(PL11SimRep.ev$variable)
PL11SimRep.ev$Congress <- "Rep. Congress"
# Append both sets of simulation results
PL11Bound <- rbind(PL11SimRep.ev, PL11SimDem.ev)
#### Create plots ####
# Partisan colours
partisan.congress.colours = c("Rep. Congress" = "#C42B00", "Dem. Congress" = "#2259B3")
PartyInteractionPlot <- ggplot(data = PL11Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Congress), colour = "grey70") +
geom_point(shape = 21, aes(color = Congress), alpha = I(0.05), size = 7) +
scale_x_discrete(limits = c("Republican President", "Democratic President")) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.congress.colours, name = "") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
print(PartyInteractionPlot)
################
# President*Congress Interaction Graphs
# Christopher Gandrud
# Updated 31 July 2012
################
# Create range of values to simulate expected values across
pres_party.r <- c(0, 1)
house_dem_rep.r <- seq(0.87, 2.04, by = .01)
# Set fitted values
PB11SetDem <- setx(PB11, pres_party = pres_party.r, house_dem_rep = 1.2, senate_dem_rep = 1.2)
PB11SetRep <- setx(PB11, pres_party = pres_party.r, house_dem_rep = 0.8, senate_dem_rep = 0.8)
# Simulate expected values.
PB11SimDem <- sim(PB11, x = PB11SetDem)
PB11SimRep <- sim(PB11, x = PB11SetRep)
# Extract expected values from simulations (Dem)
PB11SimDem.ev <- PB11SimDem$qi
PB11SimDem.ev <-data.frame(PB11SimDem.ev$ev)
names(PB11SimDem.ev) <- c("Republican President", "Democratic President")
PB11SimDem.ev <- melt(PB11SimDem.ev, measure = 1:2)
# Extract expected values from simulations (Rep)
PB11SimRep.ev <- PB11SimRep$qi
PB11SimRep.ev <-data.frame(PB11SimRep.ev$ev)
names(PB11SimRep.ev) <- c("Republican President", "Democratic President")
PB11SimRep.ev <- melt(PB11SimRep.ev, measure = 1:2)
# Final clean up
PB11SimDem.ev$variable <- factor(PB11SimDem.ev$variable)
PB11SimDem.ev$Congress <- "Dem. Congress"
PB11SimRep.ev$variable <- factor(PB11SimRep.ev$variable)
PB11SimRep.ev$Congress <- "Rep. Congress"
# Append both sets of simulation results
PB11Bound <- rbind(PB11SimRep.ev, PB11SimDem.ev)
#### Create plots ####
# Partisan colours
partisan.congress.colours = c("Rep. Congress" = "#C42B00", "Dem. Congress" = "#2259B3")
PartyInteractionPlot <- ggplot(data = PB11Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Congress), colour = "grey70") +
geom_point(shape = 21, aes(color = Congress), alpha = I(0.05), size = 7) +
scale_x_discrete(limits = c("Republican President", "Democratic President")) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.congress.colours, name = "") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
print(PartyInteractionPlot)
################
# President*Congress Interaction Graphs
# Christopher Gandrud
# Updated 31 July 2012
################
# Create range of values to simulate expected values across
pres_party.r <- c(0, 1)
house_dem_rep.r <- seq(0.87, 2.04, by = .01)
# Set fitted values
PB1SetDem <- setx(PB1, pres_party = pres_party.r, house_dem_rep = 1.2, senate_dem_rep = 1.2)
PB1SetRep <- setx(PB1, pres_party = pres_party.r, house_dem_rep = 0.8, senate_dem_rep = 0.8)
# Simulate expected values.
PB1SimDem <- sim(PB1, x = PB1SetDem)
PB1SimRep <- sim(PB1, x = PB1SetRep)
# Extract expected values from simulations (Dem)
PB1SimDem.ev <- PB1SimDem$qi
PB1SimDem.ev <-data.frame(PB1SimDem.ev$ev)
names(PB1SimDem.ev) <- c("Republican President", "Democratic President")
PB1SimDem.ev <- melt(PB1SimDem.ev, measure = 1:2)
# Extract expected values from simulations (Rep)
PB1SimRep.ev <- PB1SimRep$qi
PB1SimRep.ev <-data.frame(PB1SimRep.ev$ev)
names(PB1SimRep.ev) <- c("Republican President", "Democratic President")
PB1SimRep.ev <- melt(PB1SimRep.ev, measure = 1:2)
# Final clean up
PB1SimDem.ev$variable <- factor(PB1SimDem.ev$variable)
PB1SimDem.ev$Congress <- "Dem. Congress"
PB1SimRep.ev$variable <- factor(PB1SimRep.ev$variable)
PB1SimRep.ev$Congress <- "Rep. Congress"
# Append both sets of simulation results
PB1Bound <- rbind(PB1SimRep.ev, PB1SimDem.ev)
#### Create plots ####
# Partisan colours
partisan.congress.colours = c("Rep. Congress" = "#C42B00", "Dem. Congress" = "#2259B3")
PartyInteractionPlot <- ggplot(data = PB1Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Congress), colour = "grey70") +
geom_point(shape = 21, aes(color = Congress), alpha = I(0.05), size = 7) +
scale_x_discrete(limits = c("Republican President", "Democratic President")) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.congress.colours, name = "") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
print(PartyInteractionPlot)
################
# President*Congress Interaction Graphs
# Christopher Gandrud
# Updated 31 July 2012
################
# Create range of values to simulate expected values across
pres_party.r <- c(0, 1)
house_dem_rep.r <- seq(0.87, 2.04, by = .01)
# Set fitted values
PL11SetDem <- setx(PL11, pres_party = pres_party.r, house_dem_rep = 1.2, senate_dem_rep = 1.2)
PL11SetRep <- setx(PL11, pres_party = pres_party.r, house_dem_rep = 0.8, senate_dem_rep = 0.8)
# Simulate expected values.
PL11SimDem <- sim(PL11, x = PL11SetDem)
PL11SimRep <- sim(PL11, x = PL11SetRep)
# Extract expected values from simulations (Dem)
PL11SimDem.ev <- PL11SimDem$qi
PL11SimDem.ev <-data.frame(PL11SimDem.ev$ev)
names(PL11SimDem.ev) <- c("Republican President", "Democratic President")
PL11SimDem.ev <- melt(PL11SimDem.ev, measure = 1:2)
# Extract expected values from simulations (Rep)
PL11SimRep.ev <- PL11SimRep$qi
PL11SimRep.ev <-data.frame(PL11SimRep.ev$ev)
names(PL11SimRep.ev) <- c("Republican President", "Democratic President")
PL11SimRep.ev <- melt(PL11SimRep.ev, measure = 1:2)
# Final clean up
PL11SimDem.ev$variable <- factor(PL11SimDem.ev$variable)
PL11SimDem.ev$Congress <- "Dem. Congress"
PL11SimRep.ev$variable <- factor(PL11SimRep.ev$variable)
PL11SimRep.ev$Congress <- "Rep. Congress"
# Append both sets of simulation results
PL11Bound <- rbind(PL11SimRep.ev, PL11SimDem.ev)
#### Create plots ####
# Partisan colours
partisan.congress.colours = c("Rep. Congress" = "#C42B00", "Dem. Congress" = "#2259B3")
PartyInteractionPlot <- ggplot(data = PL11Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Congress), colour = "grey70") +
geom_point(shape = 21, aes(color = Congress), alpha = I(0.05), size = 7) +
scale_x_discrete(limits = c("Republican President", "Democratic President")) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.congress.colours, name = "") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
print(PartyInteractionPlot)
################
# Comparative Expected Values of Inflation Error with Democratic and Republican Presidents
# using results from matched data where pres_party is the treatment variable and ls is the parametric model (PL8 from MainAnalysis2.R)
# Christopher Gandrud
# Updated 31 July 2012
################
# requires Zelig, reshape2, ggplot2
# Ranges of fitted values
pres_party.r <- c(0, 1)
# Set fitted values, all variables other than pres_party set to their means
ModelParty <- setx(PL8, pres_party = pres_party.r)
# Simulate quantities of interest
ModelParty.sim <- sim(PL8, x = ModelParty)
# Extract expected values from simulations
ModelParty.ev <- ModelParty.sim$qi
ModelParty.ev <-data.frame(ModelParty.ev$ev)
names(ModelParty.ev) <- c("Rep", "Dem")
ModelParty.ev <- melt(ModelParty.ev, measure = 1:2)
ModelParty.ev$variable <- factor(ModelParty.ev$variable)
# Plot
PartyBreak <- c("Rep", "Dem")
NamePartyBreak <- c("Republican President", "Democratic President")
ModelPartyPlot <- ggplot(data = ModelParty.ev, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = 1), colour = "grey70") +
geom_point(shape = 21, aes(color = variable), alpha = I(0.05), size = 7) +
scale_color_manual(values = partisan.colors, guide = FALSE) + # partisan.colors defined in the main .Rnw file
scale_x_discrete(breaks = PartyBreak, labels = NamePartyBreak) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
theme_bw(base_size = 11)
print(ModelPartyPlot)
NL13 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep, model = "ls", data = cpi.data, cite = FALSE)
library(RCurl)
library(reshape2)
library(ggplot2)
### Load data
# Load data from GitHub
url <- "https://raw.github.com/christophergandrud/GreenBook/master/Data/GB_FRED_cpi.csv"
cpi.data <- getURL(url)
cpi.data <- read.csv(textConnection(cpi.data))
## Other data loading options
#cpi.data <- read.csv("/git_repositories/GreenBook/Data/GB_FRED_cpi.csv") # Load data locally from Christopher's computer
# cpi.data <- read.dta("http://dl.dropbox.com/u/12581470/code/Replicability_code/GreenBook/GB_FRED_cpi.dta") # Load data from Dropbox
### Melt data, i.e. reshape
cpi.abs <- melt(cpi.data, id = "Quarter", measure = c("GB_CPI_QTR2", "deflator"))
### Rename variables
cpi.abs$variable <- gsub("GB_CPI_QTR2", "Forecast", cpi.abs$variable)
cpi.abs$variable <- gsub("deflator", "Actual", cpi.abs$variable)
### Colours
absolute.colors <- c("Forecast" = "#B35B40", "Actual" = "#000000")
### Create line graph
absInflation <- qplot(Quarter, value, geom = "line", data = cpi.abs, color = variable, linetype = variable) +
xlab("") + ylab("Inflation") +
scale_color_manual(values = absolute.colors, name = "") +
scale_linetype(name = "") +
geom_vline(aes(xintercept = 1996), linetype = "dotted", colour = "grey50") +
annotate("text", x = 2001, y = 8.5, label = "FRB/Global", colour = "grey50") +
geom_vline(aes(xintercept = 1975), linetype = "dotted", colour = "grey50") +
annotate("text", x = 1978, y = 1.5, label = "SEM", colour = "grey50") +
theme_bw() +
opts(axis.title.x = theme_text(size = 12, vjust = 0))
print(absInflation)
# Clean up data and create forecast error variable
cpi.data$pres_party_name <- factor(cpi.data$pres_party, label = c("Rep", "Dem"))
cpi.data$error.prop.deflator.q2 <-  (cpi.data$GB_CPI_QTR2 - cpi.data$deflator)/cpi.data$deflator
# Create FRB/Global Model Variable
cpi.data$GlobalModel[cpi.data$Quarter > 1995.4] <- "1"
cpi.data$GlobalModel[cpi.data$Quarter < 1996.1] <- "0"
cpi.data$GlobalModel <- factor(cpi.data$GlobalModel, labels = c("Before 1996", "After 1996"))
# Create Fed Chair variable
cpi.data$Chair[cpi.data$Quarter > 1987.3] <-  "Greenspan"
cpi.data$Chair[cpi.data$Quarter <= 1987.3] <- "Volcker"
cpi.data$Chair[cpi.data$Quarter <= 1979.3] <- "Miller"
cpi.data$Chair[cpi.data$Quarter <= 1978.1] <- "Burns"
cpi.data$Chair[cpi.data$Quarter <= 1970.1] <- "Martin"
cpi.data$Chair <- factor(cpi.data$Chair)
## Remove 2 quarters from Johnson presidency
cpi.data <- subset(cpi.data, president != "Johnson")
cpi.data$president <- as.factor(cpi.data$presTerm)
## Create graph
# Error region +/- 10 percent
rect.time <- data.frame(xmin = 1968, xmax = 2006, ymin = -0.1, ymax = 0.1)
# Partisan colours
partisan.colors = c("Rep" = "#C42B00", "Dem" = "#2259B3")
errors.time <- ggplot(cpi.data, aes(x = Quarter, y = error.prop.deflator.q2)) +
geom_point(aes(color = pres_party_name)) +
stat_smooth(method = "lm", aes(group = presTerm, color = pres_party_name, fill = pres_party_name)) +
geom_rect(data = rect.time, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), color = "grey20", alpha = 0.5, inherit.aes = FALSE) +
scale_color_manual(values = partisan.colors, name = "") +
scale_fill_manual(values = partisan.colors, name = "") +
xlab("") + ylab("Standardized Forecast Error") +
scale_x_continuous(limits=c(1968, 2006)) +
theme_bw() +
opts(axis.title.x = theme_text(size = 12, vjust = 0)) +
opts(axis.title.y = theme_text(angle = 90, size = 12, vjust = 0.3))
print(errors.time)
library(devtools)
# Run main analysis source code
AnalysisURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/MainAnalysis2.R"
source_url(AnalysisURL)
# Local
#source("/git_repositories/GreenBook/Analysis/MainAnalysis2.R")
# source("/git_repositories/GreenBook/Analysis/BasicAnalysisCoefPlots.R")
# Create plots
CoefPlotsURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/BasicAnalysisCoefPlots.R"
source_url(CoefPlotsURL)
URL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/ExpectedValuesPlot.R"
source_url(URL)
InterURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/PresCongressInteractions.R"
source_url(InterURL)
library(apsrtable)
# Model names & Coefficient Names -- Use A for all non-mathced models
ModelNamesA <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13")
CoefNamesA <- c("Intercept", "Recession", "Debt/GDP", "Expenditure/GDP", "Output Gap", "Discount Rate Change", "Qtr. to Election", "Election Period", "Pres. Party ID", "Pres*Election Period", "Senate Dem/Rep", "House Dem/Rep", "FRB/GlobalModel", "Greenspan", "Martin", "Miller", "Volcker", "Pres*House", "Pres*Senate", "House*Senate", "Pres*House*Senate")
# Table of non-matched models with ls
apsrtable(NL1, NL2, NL3, NL4, NL5, NL6, NL7, NL8, NL9, NL10, NL11, NL12, NL13,
digits = 1, order = ,
Sweave = TRUE,
stars = "default",
model.names = ModelNamesA,
coef.names = CoefNamesA
)
