labels.break <- c("Dem. President", "Prop. House Dem.", "Gov. Expenditure (% GDP)", "Recession", "Gov. Debt (% GDP)", "Quarters Until Election", "Potential GDP (%GDP)", "Global Model", "Prop. Senate Dem.")
est.plot <- ggplot(data = estimates, aes(x = reorder(var, lower), ymin = lower, ymax = upper, colour = match)) +
facet_grid(~ method) +
geom_linerange(size = 3, alpha = 0.6) +
scale_x_discrete(breaks = name.break, labels = labels.break) +
scale_color_manual(values = cols, name = "") +
geom_hline(aes(intercept= 0), linetype = "dotted") +
ylab("\nCoefficient Estimate") + xlab("") +
coord_flip() +
theme_bw(base_size = 11)
print(est.plot)
NL11 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep, model = "ls", data = cpi.data)
summary(N11)
library(RCurl)
library(reshape2)
library(ggplot2)
### Load data
# Load data from GitHub
url <- "https://raw.github.com/christophergandrud/GreenBook/master/Data/GB_FRED_cpi.csv?login=christophergandrud&token=0f00c334700dda57eb08fdd1b3c1d17b"
cpi.data <- getURL(url)
cpi.data <- read.csv(textConnection(cpi.data))
## Other data loading options
#cpi.data <- read.csv("/git_repositories/GreenBook/Data/GB_FRED_cpi.csv") # Load data locally from Christopher's computer
# cpi.data <- read.dta("http://dl.dropbox.com/u/12581470/code/Replicability_code/GreenBook/GB_FRED_cpi.dta") # Load data from Dropbox
### Melt data, i.e. reshape
cpi.abs <- melt(cpi.data, id = "Quarter", measure = c("GB_CPI_QTR2", "deflator"))
### Rename variables
cpi.abs$variable <- gsub("GB_CPI_QTR2", "Forecast", cpi.abs$variable)
cpi.abs$variable <- gsub("deflator", "Actual", cpi.abs$variable)
### Colours
absolute.colors <- c("Forecast" = "#B35B40", "Actual" = "#000000")
### Create line graph
absInflation <- qplot(Quarter, value, geom = "line", data = cpi.abs, color = variable, linetype = variable) +
xlab("") + ylab("Inflation") +
scale_color_manual(values = absolute.colors, name = "") +
scale_linetype(name = "") +
geom_vline(aes(xintercept = 1996), linetype = "dotted", colour = "grey50") +
annotate("text", x = 2001, y = 8.5, label = "FRB/Global", colour = "grey50") +
geom_vline(aes(xintercept = 1975), linetype = "dotted", colour = "grey50") +
annotate("text", x = 1978, y = 1.5, label = "SEM", colour = "grey50") +
theme_bw() +
opts(axis.title.x = theme_text(size = 12, vjust = 0))
print(absInflation)
library(RCurl)
library(reshape2)
library(ggplot2)
### Load data
# Load data from GitHub
url <- "https://raw.github.com/christophergandrud/GreenBook/master/Data/GB_FRED_cpi.csv?login=christophergandrud&token=0f00c334700dda57eb08fdd1b3c1d17b"
cpi.data <- getURL(url)
cpi.data <- read.csv(textConnection(cpi.data))
## Other data loading options
#cpi.data <- read.csv("/git_repositories/GreenBook/Data/GB_FRED_cpi.csv") # Load data locally from Christopher's computer
# cpi.data <- read.dta("http://dl.dropbox.com/u/12581470/code/Replicability_code/GreenBook/GB_FRED_cpi.dta") # Load data from Dropbox
### Melt data, i.e. reshape
cpi.abs <- melt(cpi.data, id = "Quarter", measure = c("GB_CPI_QTR2", "deflator"))
### Rename variables
cpi.abs$variable <- gsub("GB_CPI_QTR2", "Forecast", cpi.abs$variable)
cpi.abs$variable <- gsub("deflator", "Actual", cpi.abs$variable)
### Colours
absolute.colors <- c("Forecast" = "#B35B40", "Actual" = "#000000")
### Create line graph
absInflation <- qplot(Quarter, value, geom = "line", data = cpi.abs, color = variable, linetype = variable) +
xlab("") + ylab("Inflation") +
scale_color_manual(values = absolute.colors, name = "") +
scale_linetype(name = "") +
geom_vline(aes(xintercept = 1996), linetype = "dotted", colour = "grey50") +
annotate("text", x = 2001, y = 8.5, label = "FRB/Global", colour = "grey50") +
geom_vline(aes(xintercept = 1975), linetype = "dotted", colour = "grey50") +
annotate("text", x = 1978, y = 1.5, label = "SEM", colour = "grey50") +
theme_bw() +
opts(axis.title.x = theme_text(size = 12, vjust = 0))
print(absInflation)
#### Clean up data and create forecast error variable
cpi.data$pres_party_name <- factor(cpi.data$pres_party, label = c("Rep", "Dem"))
cpi.data$error.prop.deflator.q2 <-  (cpi.data$GB_CPI_QTR2 - cpi.data$deflator)/cpi.data$deflator
## Create FRB/Global Model Variable
cpi.data$GlobalModel[cpi.data$Quarter > 1995.4] <- "1"
cpi.data$GlobalModel[cpi.data$Quarter < 1996.1] <- "0"
cpi.data$GlobalModel <- factor(cpi.data$GlobalModel, labels = c("Before 1996", "After 1996"))
#### Partisan colours
partisan.colors = c("Rep" = "#C42B00", "Dem" = "#2259B3")
## Remove 2 quarters from Johnson presidency
cpi.data <- subset(cpi.data, president != "Johnson")
cpi.data$president <- as.factor(cpi.data$presTerm)
## Error region +/- 10 percent
rect.time <- data.frame(xmin = 1968, xmax = 2006, ymin = -0.1, ymax = 0.1)
## Create graph
errors.time <- ggplot(cpi.data, aes(x = Quarter, y = error.prop.deflator.q2)) +
geom_point(aes(color = pres_party_name)) +
stat_smooth(method = "lm", aes(group = presTerm, color = pres_party_name, fill = pres_party_name)) +
geom_rect(data = rect.time, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), color = "grey20", alpha = 0.5, inherit.aes = FALSE) +
scale_color_manual(values = partisan.colors, name = "") +
scale_fill_manual(values = partisan.colors, name = "") +
xlab("") + ylab("Standardized Forecast Error") +
scale_x_continuous(limits=c(1968, 2006)) +
theme_bw() +
opts(axis.title.x = theme_text(size = 12, vjust = 0)) +
opts(axis.title.y = theme_text(angle = 90, size = 12, vjust = 0.3))
print(errors.time)
###############
# Main Analyses for GreenBook Forecast Error Paper
# Christopher Gandrud
# 11 July 2012
###############
library(MatchIt)
library(Zelig)
library(stats)
# Subset for complete (nonmissing) values
# matchit requires data sets to have no missing values
vars <- c("ElectionPeriod", "pres_party", "error.prop.deflator.q2", "time_to_election", "recession", "senate_dem_rep", "house_dem_rep", "DebtGDP", "ExpenditureGDP", "PotentialGDP", "GlobalModel")
cpi.complete <- cpi.data[complete.cases(cpi.data[vars]),]
cpi.complete <- cpi.complete[vars]
#### Matching Model ####
# Elections
cpi.matched.election <- matchit(ElectionPeriod ~ recession + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel, data = cpi.complete, method = "genetic")
# Party
cpi.matched.party <- matchit(pres_party ~ recession + time_to_election + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel, data = cpi.complete, method = "genetic")
# Diagnostics for Covariate Balance
# summary(cpi.matched.election)
# plot(cpi.matched.election)
# summary(cpi.matched.party)
# plot(cpi.matched.party)
# Turn matched data into data.frame for analysis
cpi.Mdf.election <- match.data(cpi.matched.election)
cpi.Mdf.party <- match.data(cpi.matched.party)
NL11 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep, model = "ls", data = cpi.data)
summary(N11)
summary(NL11)
EL10 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep, model = "ls", data = cpi.Mdf.election)
summary(EL10)
PL11 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep, model = "ls", data = cpi.Mdf.party)
summary(PL11)
library(apsrtable)
# Model names & Coefficient Names -- Use C for all ElectionPeriod mathced models
ModelNamesC <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11")
CoefNamesC <- c("Intercept", "Recession", "Debt/GDP", "Expenditure/GDP", "Output Gap", "Qtr. to Election", "Election Period", "Pres. Party ID", "Senate Dem/Rep", "House Dem/Rep", "FRB/GlobalModel", "Pres Party ID*House", "Pres Party ID*Senate", "House*Senate", "Pres*House*Senate")
# Table of non-matched models with ls
apsrtable(PL1, PL2, PL3, PL4, PL5, PL6, PL7, PL8, PL9, PL10, PL11,
digits = 1,
Sweave = TRUE,
stars = "default",
model.names = ModelNamesC,
coef.names = CoefNamesC
)
NB1 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + time_to_election + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + GlobalModel, model = "normal.bayes", data = cpi.data)
PB1 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + time_to_election + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel, model = "normal.bayes", data = cpi.Mdf.party)
library(table)
install.packages("table")
install.packages("tables")
library(tables)
tabular(summary(PB1))
z <- summary(PB1)
tabular(z)
library(xtable)
table <- xtable(PB1)
table <- xtable(summary(PB1)
)
z
fix(z)
PB1table <- c("PB1$Mean")
PB1table <- PB1$Mean
fix(PB1table)
PB1 <- data.frame(PB1)
PB1 <- matrix(PB1)
View(PB1)
PB1 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + time_to_election + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel, model = "normal.bayes", data = cpi.Mdf.party)
PB1 <- data.frame(summary(PB1))
PB1 <- matrix(summary(PB1))
View(PB1)
?confint
PB1.cat <- summary(PB1)
PB1.cat.sum <- as.data.frame(PB1.cat$summary)
PB1 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + time_to_election + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel, model = "normal.bayes", data = cpi.Mdf.party)
PB1.cat <- summary(PB1)
PB1.cat.sum <- as.data.frame(PB1.cat$summary)
PB1.cat.sum$var <- rownames(PB1.cat.sum)
View(PB1.cat.sum)
?xtable
methods(xtable)
library(Zelig)
?library
library(Zelig, quietly = TRUE)
?zelig
############
# Clean Up Laeven & Valencia (2012) Banking Crisis Data
# Christopher Gandrud
# Updated 18 July 2012
############
## Laeven & Valencia (2012) data can be found at: http://www.imf.org/external/pubs/cat/longres.aspx?sk=26015.0
## The data set 'SYSTEMIC BANKING CRISES DATABASE.xlsx' was downloaded.
## The 'Additional Details' sheet was saved as a .csv file called  'LaeValPolicies.csv' in a folder called LavVal2012.
## I hand deleted the heading rows.
# Load required packages
library(stringr)
library(xtable)
library(countrycode)
# Set working directory and load the data.
setwd("/git_repositories/amcData/BaseFiles/LaeVal2012")
# Input data and transform it into long format
restruct <- read.csv("LavValPolicies.csv")
# Take the matrix transpose to reshape the data from wide to long format.
restruct <- t(restruct)
# Remove phantom column
restruct <- restruct[, -26]
# Create list of variables and descriptions
Description <- restruct[1, ]
c <- c("Country")
Description <- append(c, values = Description)
Description <- str_trim(Description)
ColNames <- c("country", "CrisisDate", "CrisisDateSystemic", "CurrencyCrisis", "YearCurrencyCrisis", "SovereignCrisis", "YearSovereignCrisis", "CreditBoom", "CreditorRights", "CreditorRightsIndex", "DepositIns", "YearDICreated", "DICoverageLimit", "DICoverageRatio", "DepositFreeze", "DateDepositFreeze", "DurationDepositFreeze", "TimeDepositsFreeze", "BankHoliday", "DateBankHoliday", "DurationBankHoliday", "BankGuaranteee", "DateBankGuaranteeStart", "DateBankGuaranteeEnd", "BankGuaranteeDuration", "BankGuaranteeCoverage", "EmergencyLending", "DateEmergencyLending", "PeakLendingSupport", "BankRestructuring", "Nationalizations", "AssetPurchases", "AMC", "Recap", "RecapCosts", "RecoveryDummy", "RecoveryProceeds", "GovRecapCosts", "DepositorLosses", "DepositorLosesSeverity", "MonetaryPolicyIndex", "AverageReserveChange", "FiscalPolicyIndex", "IncreasePublicDebt", "IMFProgram", "YearIMFProgram", "PeakNPLs", "NetFiscalCosts", "GrossFiscalCosts", "FiveYearRecovery", "OutputLoss")
# Create table and markdown file of variable descriptions.
VarList <- cbind(ColNames, Description)
VarList <- xtable(VarList)
LvVariableTable <- print(VarList, type = "html")
cat("# Variables Lables and Variable Descriptions for Laeven & Valencia's (2012) Restructuring Data\n ### See: <http://www.imf.org/external/pubs/cat/longres.aspx?sk=26015.0>\n\n", LvVariableTable, file = "/git_repositories/amcData/MainData/VariableDescriptions/LaevenValenciaVariableDescriptions.md")
# Write new table. I did this to get around a problem correctly naming the reshaped variables.
write.table(restruct, file = "restruct.csv", sep = ",")
# Remove % sign
RestructPercent <- readLines("restruct.csv")
RestructPercent <- gsub("%", "", RestructPercent)
write(RestructPercent, file = "restruct.csv")
restruct <- read.csv("restruct.csv", row.names = NULL, col.names = ColNames)
unlink("restruct.csv")
restruct <- restruct[-1, ]
# Clean up country names and create IMF code indexing
restruct$country <- gsub(".[0-9]", "", restruct$country)
restruct$country <- gsub("\\.", " ", restruct$country)
restruct$imfcode <- countrycode(restruct$country, origin = "country.name", destination = "imf")
# Clean up dates
restruct$CrisisDate[restruct$country == "Sri Lanka"] <- 1989
restruct$CrisisDate <- gsub("1988", "Jan-88", restruct$CrisisDate)
restruct$CrisisDate <- gsub("1989", "Jan-89", restruct$CrisisDate)
restruct$CrisisDate <- paste(restruct$CrisisDate, "-01", sep = "")
restruct$CrisisDate <- as.Date(restruct$CrisisDate, "%b-%y-%d")
restruct$year <- as.numeric(str_extract(restruct$CrisisDate, "[0-9][0-9][0-9][0-9]"))
# Clean up DICoverageLimit variable values
restruct$DICoverageLimit <- gsub(",", "", restruct$DICoverageLimit)
restruct$DICoverageLimit <- gsub("-", "", restruct$DICoverageLimit)
restruct$DICoverageLimit <- gsub("Unlimited", "Full", restruct$DICoverageLimit)
# Recode AMC variable
restruct$AMC <- as.numeric(restruct$AMC)
restruct$AMCType[restruct$AMC == 1] <- "None"
restruct$AMCType[restruct$AMC == 2] <- "Centralised"
restruct$AMCType[restruct$AMC == 3] <- "Decentralised"
# Sweden reclassified as decentralised
restruct$AMCType[restruct$AMC == "Sweden"] <- "Decentralised"
View(restruct)
restruct$AMCType[restruct$country == "Sweden" & restruct$year == 1991] <- "Decentralised"
View(restruct)
#########
# Make amcData Data Set
# Christopher Gandrud
# Updated 17 July 2012
#########
# Set working directory
setwd("/git_repositories/amcData/SourceCode/DataCreation/")
source("LV_Data_Clean.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/")
source("AddDPIVariables.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/")
source("AddUDSVariable.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/")
source("MergeCleaned.R")
# Load required library
library(Zelig)
# Run model
NBModel <- zelig(Examination ~ Education, model = "normal.bayes",
data = swiss, cite = FALSE)
# Find NBModel's class
class(NBModel)
NBSummary <- summary(NBModel)
fix(NBSummary)
fix(NBSummary)
?xtable
methods(xtable)
NBModel <- zelig(Examination ~ Education, model = "normal.bayes",
data = swiss, cite = FALSE)
NBModelSum <- summary(NBModel)
NBSumDataFrame <- NBModelSum$summary
NBSumDataFrame
NBSumDataFrame$Variables <- rownames(NBSumDataFrame)
NBTable <- NBSumDataFrame[, c("Variables", "Mean", "2.5%", "50%", "97.5%")]
fix(NBSumDataFrame)
NBSumDataFrame <- NBModelSum$summary
View(NBSumDataFrame)
NBSumDataFrame <- data.frame(NBModelSum$summary)
NBSumDataFrame$Variables <- rownames(NBSumDataFrame)
View(NBSumDataFrame)
?xtable
?swiss
fix(CoefNamesC)
NB1Summary <- summary(NB1)
NB1Summary <- data.frame(NB1Summary$summary)
?rename
library(reshape)
NB1Summary <- rename(NB1Summary, c(X2.5. = "2.5%"))
NB1Summary <- rename(NB1Summary, c(X50. = "50%"))
NB1Summary <- rename(NB1Summary, c(X97.5. = "97.5%"))
View(NB1Summary)
?xtable
?texreg
library(texreg)
?texreg
xtable(NB1Summary)
# Load packages
library(reshape)
library(xtable)
# Get the model summary
NB1Summary <- summary(NB1)
NB1Summary <- data.frame(NB1Summary$summary)
# Clean up variable names
library(reshape)
NB1Summary <- rename(NB1Summary, c(X2.5. = "2.5%"))
NB1Summary <- rename(NB1Summary, c(X50. = "50%"))
NB1Summary <- rename(NB1Summary, c(X97.5. = "97.5%"))
xtable(NB1Summary)
?xtable
?print
?texreg
# Get the model summary
PB1Summary <- summary(PB1)
PB1Summary <- data.frame(PB1Summary$summary)
# Clean up variable names
PB1Summary <- rename(PB1Summary, c(X2.5. = "2.5%"))
PB1Summary <- rename(PB1Summary, c(X50. = "50%"))
PB1Summary <- rename(PB1Summary, c(X97.5. = "97.5%"))
xtable(PB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (Matched by President's Party ID variable", label = "OutputPB")
xtable(PB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (Matched by President's Party ID variable", caption.placement = "top", label = "OutputPB")
print.xtable(xtable(PB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (Matched by President's Party ID variable", label = "OutputPB"), caption.placement=getOption("xtable.caption.placement", "bottom"))
print.xtable(xtable(PB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (Matched by President's Party ID variable", label = "OutputPB"), caption.placement=getOption("xtable.caption.placement", "top"))
print.xtable(xtable(NB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (non-matched data set)", label = "OutputNB"), caption.placement=getOption("xtable.caption.placement", "top"))
print.xtable(xtable(NB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (non-matched data set)", label = "OutputNB"), caption.placement=getOption("xtable.caption.placement", "top"), size=getOption("xtable.size", "footnotesize"),)
BayesTableVars <- c("Intercept", "Pres. Party ID", "Recession", "Qtr. to Election", "Senate Dem/Rep", "House Dem/Rep", "Expenditure/GDP", "Output Gap", "Global Model", "sigma2")
NB1Summary <- cbind(BayesTableVars, NB1Summary)
BayesTableVars <- c("", "Intercept", "Pres. Party ID", "Recession", "Qtr. to Election", "Senate Dem/Rep", "House Dem/Rep", "Expenditure/GDP", "Output Gap", "Global Model", "sigma2")
NB1Summary <- cbind(BayesTableVars, NB1Summary)
View(NB1Summary)
BayesTableVars <- c("", "Intercept", "Pres. Party ID", "Recession", "Qtr. to Election", "Senate Dem/Rep", "House Dem/Rep", "Debt/GDP",  "Expenditure/GDP", "Output Gap", "Global Model", "sigma2")
NB1Summary <- cbind(BayesTableVars, NB1Summary)
BayesTableVars <- c("Intercept", "Pres. Party ID", "Recession", "Qtr. to Election", "Senate Dem/Rep", "House Dem/Rep", "Debt/GDP",  "Expenditure/GDP", "Output Gap", "Global Model", "sigma2")
NB1Summary <- cbind(BayesTableVars, NB1Summary)
View(NB1Summary)
Variables <- c("Intercept", "Pres. Party ID", "Recession", "Qtr. to Election", "Senate Dem/Rep", "House Dem/Rep", "Debt/GDP",  "Expenditure/GDP", "Output Gap", "Global Model", "sigma2")
NB1Summary <- cbind(Variables, NB1Summary)
print.xtable(xtable(NB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (non-matched data set)", label = "OutputNB", align = c("l", "c", "c", "c", "c", "c")), caption.placement=getOption("xtable.caption.placement", "top"), size=getOption("xtable.size", "footnotesize"), include.rownames = FALSE)
print.xtable(xtable(NB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (non-matched data set)", label = "OutputNB", align = c("l", "l", "c", "c", "c", "c", "c")), caption.placement=getOption("xtable.caption.placement", "top"), size=getOption("xtable.size", "footnotesize"), include.rownames = FALSE)
View(NB1Summary)
NB1Summary <- summary(NB1)
NB1Summary <- data.frame(NB1Summary$summary)
# Clean up variable names
NB1Summary <- rename(NB1Summary, c(X2.5. = "2.5%"))
NB1Summary <- rename(NB1Summary, c(X50. = "50%"))
NB1Summary <- rename(NB1Summary, c(X97.5. = "97.5%"))
# Clean up Covariate Labels
Variables <- c("Intercept", "Pres. Party ID", "Recession", "Qtr. to Election", "Senate Dem/Rep", "House Dem/Rep", "Debt/GDP",  "Expenditure/GDP", "Output Gap", "Global Model", "sigma2")
NB1Summary <- cbind(Variables, NB1Summary)
print.xtable(xtable(NB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (non-matched data set)", label = "OutputNB", align = c("l", "c", "c", "c", "c", "c")), caption.placement=getOption("xtable.caption.placement", "top"), size=getOption("xtable.size", "footnotesize"), include.rownames = FALSE)
print.xtable(xtable(NB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (non-matched data set)", label = "OutputNB", align = c("l", "l", "c", "c", "c", "c", "c")), caption.placement=getOption("xtable.caption.placement", "top"), size=getOption("xtable.size", "footnotesize"), include.rownames = FALSE)
PB1Summary <- cbind(Variables, PB1Summary)
PB1Summary <- summary(PB1)
PB1Summary <- data.frame(PB1Summary$summary)
# Clean up variable names
PB1Summary <- rename(PB1Summary, c(X2.5. = "2.5%"))
PB1Summary <- rename(PB1Summary, c(X50. = "50%"))
PB1Summary <- rename(PB1Summary, c(X97.5. = "97.5%"))
View(PB1Summary)
PB1 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + time_to_election + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + GlobalModel, model = "normal.bayes", data = cpi.Mdf.party)
summary(PB1)
print.xtable(xtable(NB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (non-matched data set)", label = "OutputNB", align = c("l", "l", "c", "c", "c", "c", "c")), caption.placement=getOption("xtable.caption.placement", "top"), size=getOption("xtable.size", "small"), include.rownames = FALSE)
print.xtable(xtable(PB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (Matched by President's Party ID variable", label = "OutputPB", align = c("l", "c", "c", "c", "c", "c")), caption.placement=getOption("xtable.caption.placement", "top"), size=getOption("xtable.size", "footnotesize"), include.rownames = FALSE)
library(RCurl)
library(reshape2)
library(ggplot2)
### Load data
# Load data from GitHub
url <- "https://raw.github.com/christophergandrud/GreenBook/master/Data/GB_FRED_cpi.csv?login=christophergandrud&token=0f00c334700dda57eb08fdd1b3c1d17b"
cpi.data <- getURL(url)
cpi.data <- read.csv(textConnection(cpi.data))
## Other data loading options
#cpi.data <- read.csv("/git_repositories/GreenBook/Data/GB_FRED_cpi.csv") # Load data locally from Christopher's computer
# cpi.data <- read.dta("http://dl.dropbox.com/u/12581470/code/Replicability_code/GreenBook/GB_FRED_cpi.dta") # Load data from Dropbox
### Melt data, i.e. reshape
cpi.abs <- melt(cpi.data, id = "Quarter", measure = c("GB_CPI_QTR2", "deflator"))
### Rename variables
cpi.abs$variable <- gsub("GB_CPI_QTR2", "Forecast", cpi.abs$variable)
cpi.abs$variable <- gsub("deflator", "Actual", cpi.abs$variable)
### Colours
absolute.colors <- c("Forecast" = "#B35B40", "Actual" = "#000000")
### Create line graph
absInflation <- qplot(Quarter, value, geom = "line", data = cpi.abs, color = variable, linetype = variable) +
xlab("") + ylab("Inflation") +
scale_color_manual(values = absolute.colors, name = "") +
scale_linetype(name = "") +
geom_vline(aes(xintercept = 1996), linetype = "dotted", colour = "grey50") +
annotate("text", x = 2001, y = 8.5, label = "FRB/Global", colour = "grey50") +
geom_vline(aes(xintercept = 1975), linetype = "dotted", colour = "grey50") +
annotate("text", x = 1978, y = 1.5, label = "SEM", colour = "grey50") +
theme_bw() +
opts(axis.title.x = theme_text(size = 12, vjust = 0))
print(absInflation)
source('~/.active-rstudio-document', echo=TRUE)
####################
# Greenbook MatchIt Analyses Coef Plots Compare
# Christopher Gandrud
# 11 July 2012
####################
#### Figures for ls Results Catapilar Plot ####
# .cat for catapilar graph
# .sum for summary
### LS
# Extract and melt quantiles for marginal posterior distributions (not matched data set)
NL7.cat <- confint(NL7)
NL7.cat.sum <- as.data.frame(NL7.cat)
NL7.cat.sum$var <- rownames(NL7.cat.sum)
NL7.lower.molten <- melt(NL7.cat.sum, id = c("var"), measure.vars = c("2.5 %"), value.name = "lower")
NL7.lower.molten <- NL7.lower.molten[, -2]
NL7.upper.molten <- melt(NL7.cat.sum, id = c("var"), measure.vars = c("97.5 %"), value.name = "upper")
NL7.upper.molten <- NL7.upper.molten[, -2]
NL7.molten <- merge(NL7.lower.molten, NL7.upper.molten)
NL7.molten$match <- "Not Matched"
# Extract and melt quantiles for marginal posterior distributions (matched data set)
PL7.cat <- confint(PL7)
PL7.cat.sum <- as.data.frame(PL7.cat)
PL7.cat.sum$var <- rownames(PL7.cat.sum)
PL7.lower.molten <- melt(PL7.cat.sum, id = c("var"), measure.vars = c("2.5 %"), value.name = "lower")
PL7.lower.molten <- PL7.lower.molten[, -2]
PL7.upper.molten <- melt(PL7.cat.sum, id = c("var"), measure.vars = c("97.5 %"), value.name = "upper")
PL7.upper.molten <- PL7.upper.molten[, -2]
PL7.molten <- merge(PL7.lower.molten, PL7.upper.molten)
PL7.molten$match <- "Matched"
estimates.ls <- rbind(NL7.molten, PL7.molten)
estimates.ls$method <- "OLS"
#### Figures for normal.bayes Results Catapilar Plot ####
# .cat for catapilar graph
# .sum for summary
### Normal Bayes Models
# Extract and melt quantiles for marginal posterior distributions (not matched data set)
NB1.cat <- summary(NB1)
NB1.cat.sum <- as.data.frame(NB1.cat$summary)
NB1.cat.sum$var <- rownames(NB1.cat.sum)
NB1.lower.molten <- melt(NB1.cat.sum, id = c("var"), measure.vars = c("2.5%"), value.name = "lower")
NB1.lower.molten <- NB1.lower.molten[, -2]
NB1.upper.molten <- melt(NB1.cat.sum, id = c("var"), measure.vars = c("97.5%"), value.name = "upper")
NB1.upper.molten <- NB1.upper.molten[, -2]
NB1.molten <- merge(NB1.lower.molten, NB1.upper.molten)
NB1.molten$match <- "Not Matched"
# Extract and melt quantiles for marginal posterior distributions (matched data set)
PB1.cat <- summary(PB1)
PB1.cat.sum <- as.data.frame(PB1.cat$summary)
PB1.cat.sum$var <- rownames(PB1.cat.sum)
PB1.lower.molten <- melt(PB1.cat.sum, id = c("var"), measure.vars = c("2.5%"), value.name = "lower")
PB1.lower.molten <- PB1.lower.molten[, -2]
PB1.upper.molten <- melt(PB1.cat.sum, id = c("var"), measure.vars = c("97.5%"), value.name = "upper")
PB1.upper.molten <- PB1.upper.molten[, -2]
PB1.molten <- merge(PB1.lower.molten, PB1.upper.molten)
PB1.molten$match <- "Matched"
estimates.b <- rbind(NB1.molten, PB1.molten)
estimates.b$method <- "Normal Bayes"
estimates <- rbind(estimates.ls, estimates.b)
# Remove Intercept
estimates <- subset(estimates, var != c("(Intercept)"))
estimates <- subset(estimates, var != c("sigma2"))
##### Create comparison plot
cols <- c("#67A380", "#696969")
name.break <- c("pres_party", "house_dem_rep", "ExpenditureGDP", "recession", "DebtGDP", "time_to_election", "PotentialGDP", "GlobalModelAfter 1996", "senate_dem_rep")
labels.break <- c("Dem. President", "Prop. House Dem.", "Gov. Expenditure (% GDP)", "Recession", "Gov. Debt (% GDP)", "Quarters Until Election", "Potential GDP (%GDP)", "Global Model", "Prop. Senate Dem.")
est.plot <- ggplot(data = estimates, aes(x = reorder(var, lower), ymin = lower, ymax = upper, colour = match)) +
facet_grid(~ method) +
geom_linerange(size = 3, alpha = 0.6) +
scale_x_discrete(breaks = name.break, labels = labels.break) +
scale_y_continuous(breaks = c(-1.5, -0.5, 0.0, 0.5, 1.0), labels = c(-1.5, -0.5, 0, 0.5, 1))
scale_color_manual(values = cols, name = "") +
geom_hline(aes(intercept= 0), linetype = "dotted") +
ylab("\nCoefficient Estimate") + xlab("") +
coord_flip() +
theme_bw(base_size = 11)
print(est.plot)
NL7.cat <- confint(NL7)
NL7.cat.sum <- as.data.frame(NL7.cat)
NL7.cat.sum$var <- rownames(NL7.cat.sum)
NL7.lower.molten <- melt(NL7.cat.sum, id = c("var"), measure.vars = c("2.5 %"), value.name = "lower")
NL7.lower.molten <- NL7.lower.molten[, -2]
NL7.upper.molten <- melt(NL7.cat.sum, id = c("var"), measure.vars = c("97.5 %"), value.name = "upper")
NL7.upper.molten <- NL7.upper.molten[, -2]
NL7.molten <- merge(NL7.lower.molten, NL7.upper.molten)
NL7.molten$match <- "Not Matched"
NL7.molten <- merge(NL7.lower.molten, NL7.upper.molten)
View(NL7.molten)
NL7.cat <- confint(NL7)
NL7.lower.molten <- melt(NL7.cat.sum, id = c("var"), measure.vars = c("2.5 %"), value.name = "lower")
NL7.lower.molten <- NL7.lower.molten[, -2]
NL7.upper.molten <- melt(NL7.cat.sum, id = c("var"), measure.vars = c("97.5 %"), value.name = "upper")
NL7.upper.molten <- NL7.upper.molten[, -2]
NL7.molten <- merge(NL7.lower.molten, NL7.upper.molten)
NL7.molten <- merge(NL7.lower.molten, NL7.upper.molten)
View(NL7.molten)
View(NL7.molten)
library(reshape2)
NL7.upper.molten <- melt(NL7.cat.sum, id = c("var"), measure.vars = c("97.5 %"), value.name = "upper")
View(NB1.upper.molten)
View(NL7.lower.molten)
NL7.cat <- confint(NL7)
NL7.cat.sum <- as.data.frame(NL7.cat)
NL7.cat.sum$var <- rownames(NL7.cat.sum)
NL7.lower.molten <- melt(NL7.cat.sum, id = c("var"), measure.vars = c("2.5 %"), value.name = "lower")
NL7.lower.molten <- NL7.lower.molten[, -2]
NL7.upper.molten <- melt(NL7.cat.sum, id = c("var"), measure.vars = c("97.5 %"), value.name = "upper")
View(NL7.upper.molten)
NL7.upper.molten <- NL7.upper.molten[, -2]
View(NL7.upper.molten)
NL7.molten$match <- "Not Matched"
