MUnemploy <- NL5 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + error.unemploy.q2, model = "ls", data = cpi.dataU, cite = FALSE)
summary(MUnemploy)
MUnemployForecast <- NL5 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GB_Unemp2, model = "ls", data = cpi.dataU, cite = FALSE)
summary(MUnemployForecast
)
MUNRATE <- NL5 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.dataU, cite = FALSE)
summary(MUNRATE)
library(RJSON)
library(rjson)
data(cars)
toJSON(cars)
?t.test
library(openintro)
data(satGPA)
subset1 <-subset(satGPA$hsGPA,satGPA$sex == "1")
subset2 <-subset(satGPA$hsGPA,satGPA$sex == "2")
t.test(subset1,subset2, conf.int = 0.99)
t.test(subset1, subset2)
library(openintro)
library(Zelig)
data(hsGPA)
library(help = "Zelig")
library(help = "openintro")
data(hsb2)
viewData(hsb2)
viewData(hsb2)
names(hsb2)
M1 <- zelig(read ~ gender + write, model = "normal", data = hsb2)
M1 <- zelig(read ~ as.factor(gender) + write, model = "normal", data = hsb2)
M1 <- zelig(read ~ as.factor(gender) + write, model = "normal", data = hsb2, cite = FALSE)
viewData(hsb2)
Values <- c("male", "female")
ZOut <- setx(M1, gender = Values)
viewData(ZOut)
ZSim <- sim(ZOut, XOut)
XOut <- setx(M1, gender = Values)
ZSim <- sim(M1, XOut)
plot(ZSim)
library(RCurl)
library(plyr)
library(xts)
library(ggplot2)
library(MASS)
library(reshape2)
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
#### Create lagged crisis variable (Crisis onset year -3) ####
# Create individual year lags
AMCLag <- ddply(AMC, .(country), transform, SCL1 = c(NA, SystemicCrisis[-length(SystemicCrisis)]))
AMCLag <- ddply(AMCLag, .(country), transform, SCL2 = c(NA, SCL1[-length(SCL1)]))
# Create combined lagged variable
attach(AMCLag)
AMCLag$SystemicCrisisLag3 <- SystemicCrisis + SCL1 + SCL2
detach(AMCLag)
# Remove old lag variables
AMCLag$SCL1 <- AMCLag$SCL2 <- NULL
#### Create Election Year +1 lag ####
lg<-function(x)c(x[2:(length(x))], NA)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 2] <- "NoElection"
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 1] <- "Election"
#### Remove (De)centralised category
AMCLag$AMCType[AMCLag$AMCType == "(De)centralised"] <- "Decentralised"
#### Remove NA in AMC Type & Capture only an AMC's first year ####
AMCLag$AMCType[AMCLag$AMCType == ""] <- NA
NotNaAMCType <- subset(AMCLag, !is.na(AMCType) | AMCType != "None")
NotNaAMCType <- ddply(NotNaAMCType, .(country), transform, NotFirstYear = duplicated(NumAMCOpNoNA))
FirstYearNotNa <- subset(NotNaAMCType, NumAMCOpNoNA != 0 & NotFirstYear == FALSE)
#### Graphs ####
# Basic graph of AMC types
ggplot(data = FirstYearNotNa, aes(AMCType)) +
geom_bar() +
theme_bw()
# Crisis Creation Variable (1 no crisis, 2 crisis)
FirstYearNotNa$CrisisCreated <- FALSE
FirstYearNotNa$CrisisCreated[FirstYearNotNa$AMCAnyCreate == 1 &
FirstYearNotNa$SystemicCrisisLag3 == 1] <- TRUE
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ CrisisCreated) +
geom_bar() +
theme_bw()
# Election the previous year
# Facited by ElectionYear & Crisis Created
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ ElectionYear1) +
geom_bar() +
theme_bw()
# Facited by ElectionYear & Crisis Created
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(ElectionYear ~ CrisisCreated) +
geom_bar() +
theme_bw()
# govfrac density
ggplot(data = FirstYearNotNa, aes(govfrac)) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
# UDS density
ggplot(data = FirstYearNotNa, aes(UDS)) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(log(GDPperCapita))) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
TypeColors <- c("#E6AB02", "#1B9E77")
# Number operating by type
SumOp <- ddply(NotNaAMCType, .(year, AMCType), function(x) sum(x$NumAMCOpNoNA))
SumOp <- subset(SumOp, AMCType !=  "?")
SumOp <- subset(SumOp, AMCType !=  "None")
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9)) +
scale_color_manual(values = TypeColors) +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
?lm
0.75/2
0.075/2
installed.packages("tabplotd3")
install.packages("tabplotd3")
100/100000
install.packages("formatR")
data(possum)
library(openintro)
data(possum)
rstudio::viewData(possum)
Male1 <- subset(possum, sex == "m" & site == 1)
rstudio::viewData(possum)
rstudio::viewData(possum)
?subset
summary(possum$sex)
summary(possum$site)
rstudio::viewData(Male1)
library(MASS)
?table
table(possum$sex, possum$site)
Table1 <- table(possum$sex, possum$site)
Table1
library(RTools)
library(Rtools)
library(devtools)
install.packages(c("mapproj", "msm", "mvtnorm", "nlme", "pkgmaker", "rngtools", "survival"))
0.5 * (1 + \sqrt(1 + 1/0.001))
0.5 * (1 + sqrt(1 + 1/0.001))
install.packages("digest")
# Load libraries
library(RCurl)
library(plyr)
library(xts)
library(ggplot2)
library(MASS)
library(reshape2)
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
#### Create lagged crisis variable (Crisis onset year -3) ####
# Create individual year lags
AMCLag <- ddply(AMC, .(country), transform, SCL1 = c(NA, SystemicCrisis[-length(SystemicCrisis)]))
AMCLag <- ddply(AMCLag, .(country), transform, SCL2 = c(NA, SCL1[-length(SCL1)]))
# Create combined lagged variable
attach(AMCLag)
AMCLag$SystemicCrisisLag3 <- SystemicCrisis + SCL1 + SCL2
detach(AMCLag)
# Remove old lag variables
AMCLag$SCL1 <- AMCLag$SCL2 <- NULL
#### Create Election Year +1 lag ####
lg<-function(x)c(x[2:(length(x))], NA)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 2] <- "NoElection"
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 1] <- "Election"
#### Remove (De)centralised category
AMCLag$AMCType[AMCLag$AMCType == "(De)centralised"] <- "Decentralised"
#### Remove NA in AMC Type & Capture only an AMC's first year ####
AMCLag$AMCType[AMCLag$AMCType == ""] <- NA
NotNaAMCType <- subset(AMCLag, !is.na(AMCType) | AMCType != "None")
NotNaAMCType <- ddply(NotNaAMCType, .(country), transform, NotFirstYear = duplicated(NumAMCOpNoNA))
FirstYearNotNa <- subset(NotNaAMCType, NumAMCOpNoNA != 0 & NotFirstYear == FALSE)
#### Graphs ####
# Basic graph of AMC types
ggplot(data = FirstYearNotNa, aes(AMCType)) +
geom_bar() +
theme_bw()
# Created During Crisis (onset year + 2) & Not
# Crisis Creation Variable (1 no crisis, 2 crisis)
FirstYearNotNa$CrisisCreated <- FALSE
FirstYearNotNa$CrisisCreated[FirstYearNotNa$AMCAnyCreate == 1 &
FirstYearNotNa$SystemicCrisisLag3 == 1] <- TRUE
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ CrisisCreated) +
geom_bar() +
theme_bw()
# Election the previous year
# Facited by ElectionYear & Crisis Created
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ ElectionYear1) +
geom_bar() +
theme_bw()
# Facited by ElectionYear & Crisis Created
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(ElectionYear ~ CrisisCreated) +
geom_bar() +
theme_bw()
# govfrac density
ggplot(data = FirstYearNotNa, aes(govfrac)) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
# govfrac frequency
ggplot(data = FirstYearNotNa, aes(govfrac)) +
geom_freqpoly(aes(line = AMCType, color = AMCType), bandwidth = 0.1) +
theme_bw()
SumOp <- ddply(NotNaAMCType, .(year, AMCType), function(x) sum(x$NumAMCOpNoNA))
SumOp <- subset(SumOp, AMCType !=  "?")
SumOp <- subset(SumOp, AMCType !=  "None")
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9)) +
scale_color_manual(values = TypeColors) +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
TypeColors <- c("#E6AB02", "#1B9E77")
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9)) +
scale_color_manual(values = TypeColors) +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
# Number Created by type
SumCreated <- ddply(NotNaAMCType, .(year, AMCType), function(x) sum(x$NumAMCCountryNoNA))
SumCreated <- subset(SumCreated, AMCType !=  "?")
SumCreated <- subset(SumCreated, AMCType !=  "None")
ggplot(data = SumCreated, aes(year, V1)) +
geom_line(aes(color = AMCType)) +
xlab("") + ylab("Number Created\n") +
theme_bw(base_size = 15)
# Number Created by type & Crisis
rstudio::viewData(SumCreated)
rstudio::viewData(SumCreated)
rstudio::viewData(AMC)
rstudio::viewData(SumCreated)
rstudio::viewData(FirstYearNotNa)
sum(FirstYearNotNa$NumAMCCountryNoNA)
Countries <- !duplicated(FirstYearNotNa$country)
installed.packages("rworldmap")
library(rworldmap)
library(rworldmaps)
library(rworldmap)
rstudio::viewData(SumCreated)
rstudio::viewData(FirstYearNotNa)
rstudio::viewData(AMC)
MapAMCData <- joinCountryData2Map(subset(AMC, year == 2011 & TotalAmcCreated != 0),
joinCode = "ISO2", nameJoinColumn = "ISOCode")
MapAMCData <- joinCountryData2Map(subset(AMC, year == 2011 & NumAMCCountryNoNA != 0),
joinCode = "ISO2", nameJoinColumn = "ISOCode")
fix(MapAMCData)
MapAMC <- mapCountryData(MapAMCData)
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA"
colourPalette=brewer.pal(6, "Blues"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA"
colourPalette=brewer.pal(6, "Blues"),
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(6, "Blues"),
mapTitle = "")
library(RColorBrewer)
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(6, "Blues"),
mapTitle = "")
?brewer.pal;
display.brewer.pal(6, "blues")
display.brewer.pal(6, "Blues")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(3, "Blues"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(12, "Blues"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(5, "Blues"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(1, "Blues"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(3, "Blues"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(6, "Blues"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(6, "Blues", type = "seq"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(3, "Blues", type = "seq"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(3, "BuPu"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA",
colourPalette = brewer.pal(3, "YlOrRd"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA", numCats = 6,
colourPalette = brewer.pal(6, "YlOrRd"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA", numCats = 6, catMethod = c(1, 2, 3, 4, 5, 6)
colourPalette = brewer.pal(6, "YlOrRd"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA", numCats = 6, catMethod = c(1, 2, 3, 4, 5, 6),
colourPalette = brewer.pal(6, "YlOrRd"),
mapTitle = "")
MapAMC <- mapCountryData(MapAMCData, nameColumnToPlot = "NumAMCCountryNoNA", numCats = 6, catMethod = c(1, 2, 3, 4, 5, 6),
colourPalette = brewer.pal(6, "GnBu"),
mapTitle = "")
# Create Google Motion Chart from World Bank Finance Data
# Inspired by http://lamages.blogspot.com/2011/09/accessing-and-plotting-world-bank-data.html
# Written by Christopher Gandrud
# 15 October 2011
library(WDI)
library(gregmisc)
library(googleVis)
## Collect indicator variables based on World Bank variable Key
## Indicators to collect
# External debt stocks, private non-guaranteed (Current USD) long-term: DT.DOD.DPNG.CD
# External debt as a % of GNI: DT.DOD.DECT.GN.ZS
# Short-term debt (% of total external debt): DT.DOD.DSTC.ZS
# Real effective exchange rate index (2005 = 100): PX.REX.REER
# GDP per capita (current USD): NY.GDP.PCAP.CD
# Bank nonperforming loans to total gross loans: FB.AST.NPER.ZS
debtWB <- WDI(country="all", indicator= c("DT.DOD.DPNG.CD",
"DT.DOD.DECT.GN.ZS", "DT.DOD.DSTC.ZS", "PX.REX.REER",
"NY.GDP.PCAP.CD", "FB.AST.NPER.ZS"),
start=1980, end=2010)
## Rename variables
debtWB <-rename.vars(debtWB, from="DT.DOD.DPNG.CD", to="private.external.debt.LT", info=FALSE)
debtWB <- rename.vars(debtWB, from="DT.DOD.DECT.GN.ZS", to="total.ext.debt.per.gni", info=FALSE)
debtWB <- rename.vars(debtWB, from="DT.DOD.DSTC.ZS", to="short.term.debt.per.ext", info=FALSE)
debtWB <- rename.vars(debtWB, from="PX.REX.REER", to="forex.2005.baseline", info=FALSE)
debtWB <- rename.vars(debtWB, from="NY.GDP.PCAP.CD", to="gdp.per.capita.current.USD", info=FALSE)
debtWB <- rename.vars(debtWB, from="FB.AST.NPER.ZS", to="nonperforming.loans.per.total", info=FALSE)
## Remove iso code
debtWB <- remove.vars(debtWB, names="iso2c", info=FALSE)
## Drop Nicaragua & Uganda (extreme forex outliers)
debtWB <- subset(debtWB, country!="Uganda" & country!="Nicaragua")
## Create Google motion chart
debtWB.motion <- gvisMotionChart(debtWB, idvar="country", timevar="year",
options=list(width=700, height=600))
## View motion chart
plot(debtWB.motion)
# Load libraries
library(RCurl)
library(plyr)
library(xts)
library(ggplot2)
library(MASS)
library(reshape2)
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
#### Create lagged crisis variable (Crisis onset year -3) ####
# Create individual year lags
AMCLag <- ddply(AMC, .(country), transform, SCL1 = c(NA, SystemicCrisis[-length(SystemicCrisis)]))
AMCLag <- ddply(AMCLag, .(country), transform, SCL2 = c(NA, SCL1[-length(SCL1)]))
# Create combined lagged variable
attach(AMCLag)
AMCLag$SystemicCrisisLag3 <- SystemicCrisis + SCL1 + SCL2
detach(AMCLag)
# Remove old lag variables
AMCLag$SCL1 <- AMCLag$SCL2 <- NULL
#### Create Election Year +1 lag ####
lg<-function(x)c(x[2:(length(x))], NA)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 2] <- "NoElection"
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 1] <- "Election"
#### Remove (De)centralised category
AMCLag$AMCType[AMCLag$AMCType == "(De)centralised"] <- "Decentralised"
#### Remove NA in AMC Type & Capture only an AMC's first year ####
AMCLag$AMCType[AMCLag$AMCType == ""] <- NA
NotNaAMCType <- subset(AMCLag, !is.na(AMCType) | AMCType != "None")
NotNaAMCType <- ddply(NotNaAMCType, .(country), transform, NotFirstYear = duplicated(NumAMCOpNoNA))
FirstYearNotNa <- subset(NotNaAMCType, NumAMCOpNoNA != 0 & NotFirstYear == FALSE)
#### Graphs ####
# Basic graph of AMC types
ggplot(data = FirstYearNotNa, aes(AMCType)) +
geom_bar() +
theme_bw()
#### Cumulative Count ####
TypeColors <- c("#E6AB02", "#1B9E77")
# Number operating by type
SumOp <- ddply(NotNaAMCType, .(year, AMCType), function(x) sum(x$NumAMCOpNoNA))
SumOp <- subset(SumOp, AMCType !=  "?")
SumOp <- subset(SumOp, AMCType !=  "None")
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9)) +
scale_color_manual(values = TypeColors) +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
ggplot(data = SumCreated, aes(year, V1)) +
geom_line(aes(color = AMCType), guide_legend="") +
xlab("") + ylab("Number Created\n") +
theme_bw(base_size = 15)
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9), guide_legend="") +
scale_color_manual(values = TypeColors) +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9), name="") +
scale_color_manual(values = TypeColors) +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9)) +
scale_color_manual(values = TypeColors, name="") +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
?require
librar(devtools)
library(devtools)
DATA <- read.csv("~/Desktop/DATA.csv")
viewData(DATA)
library(ggplot2)
names(DATA)
ggplot(DATA, aes(x = Long.term.unemployment, y = Suicide.rates)) + geom_point()
rstudio::viewData(DATA)
log(200/1000)
log(.1)
DATA <- read.csv("~/Downloads/DATA.csv")
short <- DATA[, c("Suicide.rates","Long.term.unemployment","Public.social.expenditure","GDP.per.capita","Real.GDP.growth")]
pairs(short)
DATA2<-subset(DATA, country!= "Korea")
DATA2<-subset(DATA, Country!= "Korea")
KS1<-lm(Suicide.rates~Long.term.unemployment, data=DATA2)
summary(KS1)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="year",                     options=list(width=700, height=600))
library(googleVis)
rstudio::viewData(DATA)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
rstudio::viewData(DATA)
DATA <- !duplicated(DATA)
rstudio::viewData(DATA2)
?duplicated
DATA <- read.csv("~/Downloads/DATA.csv")
DATA <- subset(DATA, !is.na(Year))
rstudio::viewData(DATA)
short <- DATA[, c("Suicide.rates","Long.term.unemployment","Public.social.expenditure","GDP.per.capita","Real.GDP.growth")]
library(googleVis)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
print(DATA.motion, "chart")
DATA.motion <- gvisMotionChart(Short, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
DATA.motion <- gvisMotionChart(short, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
rstudio::viewData(DATA)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
Data.motion
DATA.motion
print(DATA.motion)
plot(DATA.motion)
?print
height = 450))
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 550,
height = 450))
plot(M)
?print
#########
# Make amcData Data Set
# Christopher Gandrud
# Updated 7 November 2012
#########
# Install required packages
## Code based on https://gist.github.com/3710171
## See also http://bit.ly/PbabKd
doInstall <- FALSE  # Change to FALSE if you don't want packages installed.
toInstall <- c("WDI", "countrycode", "devtools", "reshape", "gdata", "xtable")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
# Run clean up files
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddAMCFull.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddLVFullCrisisYears.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddLV.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddDPIVariables.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddUDSVariable.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddWorldBank.R")
setwd("/git_repositories/amcData/SourceCode/DataCreation/CleanIndividualData/")
source("AddDreherIMF.R")
# Create merged data set
## Country-Year data
setwd("/git_repositories/amcData/SourceCode/DataCreation/Merge/")
source("MergeSurvival.R")
# Tidy workspace
rm(list = setdiff(ls(), "amcCountryYear"))
